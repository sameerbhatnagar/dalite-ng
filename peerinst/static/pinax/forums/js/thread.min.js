var thread = (function (exports) {
'use strict';

function showReplyForm(id) {
  $("#" + id).toggle();
} // Setup ajax call and attach a submit handler to the form

$.ajaxSetup({
  beforeSend: function beforeSend(xhr, settings) {
    if (!bundle.csrfSafeMethod(settings.type) && !this.crossDomain) {
      xhr.setRequestHeader("X-CSRFToken", bundle.getCsrfToken());
    }
  }
});
function toggleFollow(el, subscribe, unsubscribe) {
  console.info(el.getAttribute("aria-pressed") === "true");

  if (el.getAttribute("aria-pressed") === "true") {
    console.info("Subscribing to thread");
    var posting = $.post(subscribe);
    posting.done(function (data) {//console.info(data);
    });
  } else {
    console.info("Unsubscribing from thread");

    var _posting = $.post(unsubscribe);

    _posting.done(function (data) {//console.info(data);
    });
  }
}

function initFollows() {
  [].forEach.call(document.querySelectorAll(".mdc-icon-toggle"), function (el) {
    bundle.iconToggle.MDCIconToggle.attachTo(el);
  });
}

initFollows();

function sizeEmbeddedContent() {
  document.querySelectorAll(".embedded-object").forEach(function (el) {
    var aspectRatio = +el.getAttribute("width") / +el.getAttribute("height");
    var w = Math.min(700, document.querySelector("section").offsetWidth - 30);
    el.setAttribute("width", w);
    el.setAttribute("height", w / aspectRatio);
  });
}

sizeEmbeddedContent();
window.addEventListener("resize", sizeEmbeddedContent);

exports.showReplyForm = showReplyForm;
exports.toggleFollow = toggleFollow;

return exports;

}({}));
//# sourceMappingURL=thread.min.js.map
