{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/_teacher/custom_report.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/_teacher/dashboard/questions.js","peerinst/static/peerinst/js/_teacher/dashboard/studentActivity.js","peerinst/static/peerinst/js/_teacher/dashboard/rationales.js","peerinst/static/peerinst/js/_teacher/questions.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","import { buildReq } from \"../../ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    date: message.date,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const messages = document.querySelector(\"#dalite-messages\");\n  if (model.messages.length) {\n    messages.classList.remove(\"hidden\");\n    model.messages.forEach(message => {\n      messages.appendChild(messageView(message));\n    });\n  } else {\n    messages.remove();\n  }\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"mdc-card\");\n\n  const content = document.createElement(\"div\");\n  if (message.link) {\n    content.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    content.style.setProperty(\"cursor\", \"pointer\");\n    content.title = message.link;\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"bold\");\n  title.textContent = message.title;\n  content.appendChild(title);\n\n  const caption = document.createElement(\"div\");\n  caption.classList.add(\"mdc-typography--caption\");\n  caption.textContent = message.date;\n  content.appendChild(caption);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\");\n  text.innerHTML = message.text;\n  content.appendChild(text);\n\n  container.appendChild(content);\n\n  const actions = document.createElement(\"div\");\n  actions.classList.add(\"mdc-card__actions\");\n\n  const images = document.createElement(\"div\");\n  images.classList.add(\"mdc-card__action-buttons\");\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors_author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    images.appendChild(authorsContainer);\n  }\n  actions.appendChild(images);\n\n  if (message.removable) {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"mdc-card__action-icons\");\n    const remove = document.createElement(\"i\");\n    remove.classList.add(\n      \"mdc-icon-toggle\",\n      \"material-icons\",\n      \"mdc-theme--primary\",\n    );\n    remove.textContent = \"clear\";\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    buttons.appendChild(remove);\n    actions.appendChild(buttons);\n  }\n\n  container.appendChild(actions);\n  container.style.setProperty(\"background-color\", message.colour);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  if (node.parentNode.childElementCount == 3) {\n    node.parentNode.remove();\n  } else {\n    node.remove();\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","import { buildReq } from \"../ajax.js\";\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(urls) {\n  model = {\n    urls: {\n      evaluateRationale: urls.evaluateRationale,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update() {\n  updateRationalesEvaluationAttributes();\n}\n\nfunction updateRationalesEvaluationAttributes() {\n  document.querySelectorAll(\".custom-report__rationale\").forEach(rationale => {\n    updateRationaleEvaluationAttributes(rationale);\n  });\n}\n\nfunction updateRationaleEvaluationAttributes(rationale) {\n  const evaluation = rationale.getAttribute(\"data-score\");\n  if (evaluation != \"\") {\n    const evaluation_ = parseInt(evaluation);\n    if (evaluation_ == 0) {\n      rationale.querySelector(\".flag\").setAttribute(\"data-flagged\", \"\");\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        star.removeAttribute(\"data-starred\");\n      });\n    } else {\n      rationale.querySelector(\".flag\").removeAttribute(\"data-flagged\");\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        if (3 - i <= evaluation_) {\n          star.setAttribute(\"data-starred\", \"\");\n        } else {\n          star.removeAttribute(\"data-starred\");\n        }\n      });\n    }\n  }\n}\n\nasync function flagRationale(flag) {\n  const rationale = flag.parentNode.parentNode;\n  const data = {\n    id: flag.parentNode.parentNode.getAttribute(\"data-id\"),\n    score: 0,\n    redirect: false,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.evaluateRationale, req);\n  if (resp.ok) {\n    flag.setAttribute(\"data-flagged\", \"\");\n    rationale.setAttribute(\"data-score\", \"0\");\n  }\n  updateRationaleEvaluationAttributes(rationale);\n  rationaleEvaluationView();\n}\n\nasync function evaluateRationale(star, score) {\n  const rationale = star.parentNode.parentNode;\n  const data = {\n    id: star.parentNode.parentNode.getAttribute(\"data-id\"),\n    score: score,\n    redirect: false,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.evaluateRationale, req);\n  if (resp.ok) {\n    flag.setAttribute(\"data-flagged\", \"\");\n    rationale.setAttribute(\"data-score\", `${score}`);\n  }\n  updateRationaleEvaluationAttributes(rationale);\n  rationaleEvaluationView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  rationaleEvaluationView();\n}\n\nfunction rationaleEvaluationView() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation\")\n    .forEach(rationale => {\n      toggleFlagHover(rationale.querySelector(\".flag\"));\n      rationale\n        .querySelectorAll(\".star\")\n        .forEach(star => toggleStarHover(star));\n    });\n}\n\nfunction toggleFlagHover(flag, hovering = false) {\n  if (hovering || flag.hasAttribute(\"data-flagged\")) {\n    flag.textContent = \"flag\";\n  } else {\n    flag.textContent = \"outlined_flag\";\n  }\n}\n\nfunction toggleStarHover(star, hovering = false) {\n  const stars = [...star.parentNode.getElementsByClassName(\"star\")];\n  const idx = stars.indexOf(star);\n  stars.forEach((star, i) => {\n    if (star.hasAttribute(\"data-starred\") || (hovering && i >= idx)) {\n      star.textContent = \"star\";\n    } else {\n      star.textContent = \"star_border\";\n    }\n  });\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners() {\n  addFlagListeners();\n  addEvaluateListeners();\n}\n\nfunction addFlagListeners() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation .flag\")\n    .forEach(flag => {\n      flag.addEventListener(\"mouseenter\", () => toggleFlagHover(flag, true));\n      flag.addEventListener(\"mouseleave\", () => toggleFlagHover(flag, false));\n      flag.addEventListener(\"click\", () => flagRationale(flag));\n    });\n}\n\nfunction addEvaluateListeners() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation\")\n    .forEach(rationale => {\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        star.addEventListener(\"mouseenter\", () => toggleStarHover(star, true));\n        star.addEventListener(\"mouseleave\", () =>\n          toggleStarHover(star, false),\n        );\n        star.addEventListener(\"click\", () => evaluateRationale(star, 3 - i));\n      });\n    });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls) {\n  initModel(urls);\n  update();\n  view();\n  initListeners();\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n\nexport function createElement(tag, text = \"\", attributes = {}) {\n  const elem = document.createElement(tag);\n  if (text) {\n    elem.textContent = text;\n  }\n  Object.entries(attributes).forEach(([key, val]) => {\n    elem.setAttribute(key, val);\n  });\n  return elem;\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  const header = document.querySelector(\".notifications\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\nfunction clearAll(): void {\n  model.notifications.forEach(notification => {\n    notification.onCloseClick();\n  });\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n    document\n      .querySelector(\".notifications__clear-all-btn\")\n      .removeAttribute(\"hidden\");\n  } else {\n    notificationsList.appendChild(noNotificationView());\n    document\n      .querySelector(\".notifications__clear-all-btn\")\n      .setAttribute(\"hidden\", \"\");\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.setAttribute(\"open\", \"\");\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.removeAttribute(\"open\");\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.innerHTML = notification.text;\n  div.appendChild(description);\n  const remove = createSvg(\"close\");\n  remove.classList.add(\"notification__close\");\n  remove.addEventListener(\"click\", notification.onCloseClick);\n  div.appendChild(remove);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n  addClearAllListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\nfunction addClearAllListener(): void {\n  document\n    .querySelector(\".notifications__clear-all-btn\")\n    ?.addEventListener(\"click\", () => clearAll());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  const header = document.querySelector(\".messages\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n          date: message.last_reply.date,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  document.querySelector(\".messages__read-all-btn\").classList.add(\"hidden\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    document\n      .querySelector(\".messages__read-all-btn\")\n      .classList.remove(\"hidden\");\n  }\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.setAttribute(\"open\", \"\");\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.removeAttribute(\"open\");\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"div\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = \"New!\";\n    div.appendChild(new_);\n  }\n\n  if (message.lastReply.author) {\n    const lastReply = document.createElement(\"div\");\n    lastReply.classList.add(\"message__last-reply\");\n    div.appendChild(lastReply);\n\n    const content = document.createElement(\"span\");\n    content.classList.add(\"message__last-reply__content\");\n    content.textContent = message.lastReply.content;\n    lastReply.appendChild(content);\n\n    const author = document.createElement(\"div\");\n    author.classList.add(\"message__last-reply__author\");\n    author.innerHTML =\n      message.lastReply.author + \" &middot; \" + message.lastReply.date;\n\n    if (message.nNew) {\n      const markReadBtn = document.createElement(\"span\");\n      markReadBtn.classList.add(\"message__mark-read\");\n      markReadBtn.textContent = \"clear\";\n      markReadBtn.title = \"Mark read\";\n      markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n        markRead(event, message, div),\n      );\n      author.appendChild(markReadBtn);\n    }\n\n    lastReply.appendChild(author);\n  }\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","\"use strict\";\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(\n  flagQuestionUrl,\n  getFlagQuestionReasonsUrl,\n  getNewQuestionUrl,\n  toggleFavouriteUrl,\n) {\n  model = {\n    flagQuestionReasons: [],\n    urls: {\n      flagQuestion: flagQuestionUrl,\n      getFlagQuestionReasons: getFlagQuestionReasonsUrl,\n      getNewQuestion: getNewQuestionUrl,\n      toggleFavourite: toggleFavouriteUrl,\n    },\n  };\n}\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getFlagQuestionReasons();\n}\n\nfunction toggleFlagQuestion(question) {\n  const open = question.getAttribute(\"open\");\n  const id = question.getAttribute(\"data-id\");\n  const form = question.querySelector(\".flag-question__form\");\n  const icon = question.querySelector(\".flag-question__btn\");\n\n  if (id === null) {\n    console.log(\n      \"The flag question div needs a `data-id` attribute representing the \" +\n        \"question pk.\",\n    );\n  }\n\n  if (open === null) {\n    question.setAttribute(\"open\", \"\");\n    form.removeAttribute(\"hidden\");\n    icon.textContent = \"flag\";\n  } else {\n    question.removeAttribute(\"open\");\n    form.setAttribute(\"hidden\", \"\");\n    icon.textContent = \"outlined_flag\";\n  }\n}\n\nasync function getFlagQuestionReasons() {\n  const req = buildReq({}, \"get\");\n  const resp = await fetch(model.urls.getFlagQuestionReasons, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  const data = await resp.json();\n  model.flagQuestionReasons = data.reasons;\n  flagQuestionView();\n}\n\nasync function flagQuestion(question) {\n  const id = question.getAttribute(\"data-id\");\n  const select = question.querySelector(\".flag-question__form__select\");\n  const reason = select.options[select.selectedIndex].value;\n\n  const data = {\n    id: id,\n    reason: reason,\n  };\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.flagQuestion, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  toggleFlagQuestion(question);\n  await getNewQuestion(question.parentNode.parentNode.parentNode);\n}\n\nasync function getNewQuestion(question) {\n  const posting = $.get(model.urls.getNewQuestion);\n  posting.done(data => {\n    $(question).toggle(\"fade\", () => {\n      $(question).remove();\n      $(\"#questions\").append(data);\n      $(\"#questions .mdc-card\")\n        .hide()\n        .toggle(\"slide\", transition);\n      initNewCard(model.urls.toggleFavourite, model.urls.getNewQuestion);\n      window.location.href = \"#questions\";\n    });\n  });\n  posting.fail(() => {\n    x.innerHTML = \"error\"; // Add snack bar?\n    window.setTimeout(() => {\n      x.innerHTML = \"autorenew\";\n    }, 5000);\n  });\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  flagQuestionView();\n}\n\nfunction flagQuestionView() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    const select = question.querySelector(\".flag-question__form select\");\n    clear(select);\n    model.flagQuestionReasons.forEach(reason => {\n      const option = document.createElement(\"option\");\n      option.classList.add(\"flag-question__form__option\");\n      option.value = reason;\n      option.textContent = reason;\n      select.appendChild(option);\n    });\n  });\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction addFlagQuestionListeners() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    question\n      .querySelector(\".flag-question__close\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__btn\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"submit\", event => {\n        event.preventDefault();\n        flagQuestion(question);\n      });\n    document.body.addEventListener(\"click\", () => {\n      if (question.hasAttribute(\"open\")) {\n        toggleFlagQuestion(question);\n      }\n    });\n  });\n}\n\n/********/\n/* init */\n/********/\n\nfunction initNewCard(favUrl, refreshUrl) {\n  $(\"#questions .mdc-card\").each((i, el) => {\n    if (el.getAttribute(\"initialized\") !== \"true\") {\n      el.setAttribute(\"initialized\", \"true\");\n\n      $(el)\n        .find(\".mdc-icon-toggle.favourite-btn\")\n        .each((i, heart) => {\n          bundle.iconToggle.MDCIconToggle.attachTo(heart);\n          heart.addEventListener(\"click\", () => {\n            const posting = $.post(favUrl, {\n              pk: heart.getAttribute(\"data-id\"),\n            });\n            posting.done(data => {\n              console.log(data);\n            });\n          });\n        });\n\n      $(el)\n        .find(\".remove-btn\")\n        .each((i, x) => {\n          x.addEventListener(\"click\", () => {\n            const posting = $.get(refreshUrl);\n            posting.done(data => {\n              $(el).toggle(\"fade\", () => {\n                $(el).remove();\n                $(\"#questions\").append(data);\n                $(\"#questions .mdc-card\")\n                  .hide()\n                  .toggle(\"slide\", transition);\n                initNewCard(favUrl, refreshUrl);\n                window.location.href = \"#questions\";\n              });\n            });\n            posting.fail(() => {\n              x.innerHTML = \"error\"; // Add snack bar?\n              window.setTimeout(() => {\n                x.innerHTML = \"autorenew\";\n              }, 5000);\n            });\n          });\n        });\n    }\n  });\n  addFlagQuestionListeners();\n  view();\n}\n\nexport async function init(\n  favUrl,\n  refreshUrl,\n  getFlagQuestionReasonsUrl,\n  flagQuestionUrl,\n) {\n  initModel(flagQuestionUrl, getFlagQuestionReasonsUrl, refreshUrl, favUrl);\n  initNewCard(favUrl, refreshUrl);\n  update();\n}\n","\"use strict\";\n\nexport function init(data) {\n  function draw() {\n    $(\".progress-chart\").each((i, el) => {\n      const dataset =\n        data[el.getAttribute(\"group\")][el.getAttribute(\"assignment\")];\n      bundle.plotTimeSeries(el, dataset);\n    });\n  }\n  draw();\n  window.addEventListener(\"resize\", draw);\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(url) {\n  // Rating system\n  $(\"#rationales .mdc-card\").each((i, el) => {\n    const id = el.getAttribute(\"data-id\");\n    let score;\n\n    // Score\n    $(el)\n      .find(\".star\")\n      .each((i, star) => {\n        // Handle hover\n        star.addEventListener(\"mouseover\", () => {\n          score = star.getAttribute(\"data-rank\");\n          $(\".star\").each((i, _star) => {\n            if (_star.getAttribute(\"data-rank\") <= score) {\n              _star.innerHTML = \"star\";\n            } else {\n              _star.innerHTML = \"star_border\";\n            }\n          });\n        });\n        star.addEventListener(\"mouseout\", () => {\n          $(\".star\").each((i, _star) => {\n            _star.innerHTML = \"star_border\";\n          });\n        });\n\n        // Submit score\n        $(star).one(\"click\", () => {\n          const posting = $.post(url, { id: id, score: score });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    // Flag inappropriate\n    $(el)\n      .find(\".flag\")\n      .each((i, flag) => {\n        flag.addEventListener(\"mouseover\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"flag\";\n          });\n        });\n        flag.addEventListener(\"mouseout\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"outlined_flag\";\n          });\n        });\n        $(flag).one(\"click\", () => {\n          const posting = $.post(url, { id: id, score: 0 });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    function processResponse(data) {\n      $(el).toggle(\"fade\", () => {\n        $(el).remove();\n        $(\"#rationales\").append(data);\n        $(\"#rationales .mdc-card\")\n          .hide()\n          .toggle(\"slide\", transition);\n        init(url);\n        // Refresh reputation score\n        document\n          .getElementsByTagName(\"teacher-reputation-header\")[0]\n          .setAttribute(\"stale\", \"\");\n      });\n    }\n  });\n}\n","\"use strict\";\nimport { buildReq } from \"../ajax.js\";\nimport { clear } from \"../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(\n  flagQuestionUrl,\n  getFlagQuestionReasonsUrl,\n) {\n  model = {\n    flagQuestionReasons: [],\n    urls: {\n      flagQuestion: flagQuestionUrl,\n      getFlagQuestionReasons: getFlagQuestionReasonsUrl,\n    },\n  };\n  getFlagQuestionReasons();\n}\n\nfunction toggleFlagQuestion(question) {\n  const open = question.getAttribute(\"open\");\n  const id = question.getAttribute(\"data-id\");\n  const form = question.querySelector(\".flag-question__form\");\n  const icon = question.querySelector(\".flag-question__btn\");\n\n  if (id === null) {\n    console.log(\n      \"The flag question div needs a `data-id` attribute representing the \" +\n        \"question pk.\",\n    );\n  }\n\n  if (open === null) {\n    question.setAttribute(\"open\", \"\");\n    form.removeAttribute(\"hidden\");\n    icon.textContent = \"flag\";\n  } else {\n    question.removeAttribute(\"open\");\n    form.setAttribute(\"hidden\", \"\");\n    icon.textContent = \"outlined_flag\";\n  }\n}\n\nasync function getFlagQuestionReasons() {\n  const req = buildReq({}, \"get\");\n  const resp = await fetch(model.urls.getFlagQuestionReasons, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  const data = await resp.json();\n  model.flagQuestionReasons = data.reasons;\n  flagQuestionView();\n}\n\nasync function flagQuestion(question) {\n  const id = question.getAttribute(\"data-id\");\n  const select = question.querySelector(\".flag-question__form__select\");\n  const reason = select.options[select.selectedIndex].value;\n\n  const data = {\n    id: id,\n    reason: reason,\n  };\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.flagQuestion, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  toggleFlagQuestion(question);\n}\n\nfunction flagQuestionView() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    const select = question.querySelector(\".flag-question__form select\");\n    clear(select);\n    model.flagQuestionReasons.forEach(reason => {\n      const option = document.createElement(\"option\");\n      option.classList.add(\"flag-question__form__option\");\n      option.value = reason;\n      option.textContent = reason;\n      select.appendChild(option);\n    });\n  });\n}\n\nfunction addFlagQuestionListeners() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    question\n      .querySelector(\".flag-question__close\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__btn\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"submit\", event => {\n        event.preventDefault();\n        flagQuestion(question);\n      });\n    document.body.addEventListener(\"click\", () => {\n      if (question.hasAttribute(\"open\")) {\n        toggleFlagQuestion(question);\n      }\n    });\n  });\n}\n\nexport async function init(\n  getFlagQuestionReasonsUrl,\n  flagQuestionUrl,\n) {\n  await initModel(flagQuestionUrl, getFlagQuestionReasonsUrl);\n  addFlagQuestionListeners();\n}\n","\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initCustomReport } from \"./_teacher/custom_report.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n\nexport { init as initQuestionCards } from \"./_teacher/dashboard/questions.js\";\nexport {\n  init as initStudentActivityCards,\n} from \"./_teacher/dashboard/studentActivity.js\";\nexport {\n  init as initRationalesToScoreCards,\n} from \"./_teacher/dashboard/rationales.js\";\n\nexport { init as initSearchFlag } from \"./_teacher/questions.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","date","link","authors","author","name","picture","removeMessage","div","ok","removeMessageView","view","messagesView","querySelector","length","classList","remove","forEach","appendChild","messageView","container","createElement","add","content","addEventListener","window","location","assign","style","setProperty","textContent","caption","innerHTML","actions","images","authorsContainer","img","setAttribute","buttons","node","parentNode","childElementCount","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","evaluateRationale","updateRationalesEvaluationAttributes","querySelectorAll","rationale","updateRationaleEvaluationAttributes","evaluation","evaluation_","parseInt","star","i","removeAttribute","flagRationale","flag","score","redirect","rationaleEvaluationView","toggleFlagHover","toggleStarHover","hovering","hasAttribute","stars","getElementsByClassName","idx","indexOf","initListeners","addFlagListeners","addEvaluateListeners","clear","hasChildNodes","removeChild","lastChild","createSvg","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","protocol","host","notificationsOpen","notifications","toggleNotifications","header","header_","shadowRoot","dispatchEvent","Event","notificationsView","updateNotifications","clearAll","notification","onCloseClick","badge","notificationsList","completedNotifications","filter","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","icon","error","description","initEventListeners","addNotificationsOpenListener","addClearAllListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","addGradebookListeners","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener","flagQuestionUrl","getFlagQuestionReasonsUrl","getNewQuestionUrl","toggleFavouriteUrl","flagQuestionReasons","flagQuestion","getFlagQuestionReasons","getNewQuestion","toggleFavourite","transition","duration","direction","easing","toggleFlagQuestion","question","form","reasons","flagQuestionView","select","reason","options","selectedIndex","value","posting","$","get","done","toggle","hide","initNewCard","fail","x","option","addFlagQuestionListeners","preventDefault","favUrl","refreshUrl","each","el","find","heart","bundle","iconToggle","MDCIconToggle","attachTo","post","pk","draw","dataset","plotTimeSeries","_star","one","processResponse","_flag","getElementsByTagName"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9hamF4LmpzIiwiL1VzZXJzL2FydGh1cmF5ZXN0YXNoaWxnZXJ0L0Rlc2t0b3AvRGV2ZWxvcG1lbnQvbXlkYWxpdGUgcHJvamVjdC9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL190ZWFjaGVyL2Rhc2hib2FyZC9tZXNzYWdlcy5qcyIsIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fdGVhY2hlci9kYXNoYm9hcmQuanMiLCIvVXNlcnMvYXJ0aHVyYXllc3Rhc2hpbGdlcnQvRGVza3RvcC9EZXZlbG9wbWVudC9teWRhbGl0ZSBwcm9qZWN0L2RhbGl0ZS1uZy9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX3RlYWNoZXIvY3VzdG9tX3JlcG9ydC5qcyIsIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy91dGlscy5qcyIsIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fdGVhY2hlci9oZWFkZXIvbm90aWZpY2F0aW9ucy5qcyIsIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fdGVhY2hlci9ncmFkZWJvb2tzLmpzIiwiL1VzZXJzL2FydGh1cmF5ZXN0YXNoaWxnZXJ0L0Rlc2t0b3AvRGV2ZWxvcG1lbnQvbXlkYWxpdGUgcHJvamVjdC9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL190ZWFjaGVyL2hlYWRlci9tZXNzYWdlcy5qcyIsIi9Vc2Vycy9hcnRodXJheWVzdGFzaGlsZ2VydC9EZXNrdG9wL0RldmVsb3BtZW50L215ZGFsaXRlIHByb2plY3QvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fdGVhY2hlci9kYXNoYm9hcmQvcXVlc3Rpb25zLmpzIiwiL1VzZXJzL2FydGh1cmF5ZXN0YXNoaWxnZXJ0L0Rlc2t0b3AvRGV2ZWxvcG1lbnQvbXlkYWxpdGUgcHJvamVjdC9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL190ZWFjaGVyL2Rhc2hib2FyZC9zdHVkZW50QWN0aXZpdHkuanMiLCIvVXNlcnMvYXJ0aHVyYXllc3Rhc2hpbGdlcnQvRGVza3RvcC9EZXZlbG9wbWVudC9teWRhbGl0ZSBwcm9qZWN0L2RhbGl0ZS1uZy9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX3RlYWNoZXIvZGFzaGJvYXJkL3JhdGlvbmFsZXMuanMiLCIvVXNlcnMvYXJ0aHVyYXllc3Rhc2hpbGdlcnQvRGVza3RvcC9EZXZlbG9wbWVudC9teWRhbGl0ZSBwcm9qZWN0L2RhbGl0ZS1uZy9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX3RlYWNoZXIvcXVlc3Rpb25zLmpzIiwiL1VzZXJzL2FydGh1cmF5ZXN0YXNoaWxnZXJ0L0Rlc2t0b3AvRGV2ZWxvcG1lbnQvbXlkYWxpdGUgcHJvamVjdC9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL3RlYWNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDc3JmVG9rZW4oKSB7XG4gIHJldHVybiBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50c0J5TmFtZShcImNzcmZtaWRkbGV3YXJldG9rZW5cIilbMF1cbiAgICAuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlcShkYXRhLCBtZXRob2QpIHtcbiAgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtQ1NSRlRva2VuXCI6IGdldENzcmZUb2tlbigpLFxuICAgICAgfSxcbiAgICB9O1xuICB9IGVsc2UgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcInBvc3RcIikge1xuICAgIGNvbnN0IGJvZHkgPSBkYXRhID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBcIlwiO1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1DU1JGVG9rZW5cIjogZ2V0Q3NyZlRva2VuKCksXG4gICAgICB9LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE1ldGhvZCAke21ldGhvZH0gbm90IGltcGxlbWVudGVkIHlldC5gKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXNzaWdubWVudFF1ZXN0aW9uTGlzdChcbiAgdXJsLFxuICBxdWVzdGlvbklkLFxuICBhc3NpZ25tZW50SWRlbnRpZmllcixcbikge1xuICBjb25zdCB0b2tlbiA9IGdldENzcmZUb2tlbigpO1xuICBjb25zdCBkYXRhID0ge1xuICAgIHF1ZXN0aW9uX2lkOiBxdWVzdGlvbklkLFxuICAgIGFzc2lnbm1lbnRfaWRlbnRpZmllcjogYXNzaWdubWVudElkZW50aWZpZXIsXG4gIH07XG4gIGNvbnN0IHJlcSA9IHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiWC1DU1JGVG9rZW5cIjogdG9rZW4sXG4gICAgfSxcbiAgfTtcbiAgZmV0Y2godXJsLCByZXEpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWFuaXB1bGF0ZSBET01cbiAgICAgICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlc3Rpb24tbGlzdFwiKTtcbiAgICAgICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHF1ZXN0aW9uSWQpO1xuICAgICAgICBpZiAoJC5jb250YWlucyhsaXN0LCBjYXJkKSkge1xuICAgICAgICAgICQoXCIjXCIgKyBxdWVzdGlvbklkKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKFwiI1wiICsgcXVlc3Rpb25JZClcbiAgICAgICAgICAgIC5maW5kKCQoXCIudXBkYXRlLXF1ZXN0aW9ucy1idG5cIikpXG4gICAgICAgICAgICAuaHRtbChcImRlbGV0ZVwiKTtcbiAgICAgICAgICBjb25zdCBxID0gJChcIiNcIiArIHF1ZXN0aW9uSWQpLmRldGFjaCgpO1xuICAgICAgICAgIHEuYXBwZW5kVG8oJChcIiNxdWVzdGlvbi1saXN0XCIpKTtcbiAgICAgICAgICAkKFwiI2VtcHR5LWFzc2lnbm1lbnQtbGlzdFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAkKFwiLnNlYXJjaC1zZXRcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgICAgICAgLmZpbmQoXCIuZmlsdGVyLWNvdW50XCIpXG4gICAgICAgICAgICAgIC5lbXB0eSgpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJCh0aGlzKS5maW5kKFwiLm1kYy1jYXJkOnZpc2libGVcIikubGVuZ3RoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXMsbWF4LWxlblxuICAgICAgICAgIH0pO1xuICAgICAgICAgICQoXCIuc2VhcmNoLXNldFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICAgICAgICAuZmluZChcIi5maWx0ZXItY291bnQtdG90YWxcIilcbiAgICAgICAgICAgICAgLmVtcHR5KClcbiAgICAgICAgICAgICAgLmFwcGVuZCgkKHRoaXMpLmZpbmQoXCIubWRjLWNhcmRcIikubGVuZ3RoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXMsbWF4LWxlblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgYnVpbGRSZXEgfSBmcm9tIFwiLi4vLi4vYWpheC5qc1wiO1xuXG4vKioqKioqKioqL1xuLyogbW9kZWwgKi9cbi8qKioqKioqKiovXG5cbmxldCBtb2RlbDtcblxuZnVuY3Rpb24gaW5pdE1vZGVsKGRhdGEpIHtcbiAgbW9kZWwgPSB7XG4gICAgdXJsczoge1xuICAgICAgZGFsaXRlTWVzc2FnZXM6IGRhdGEudXJscy5kYWxpdGVNZXNzYWdlcyxcbiAgICAgIHJlbW92ZURhbGl0ZU1lc3NhZ2U6IGRhdGEudXJscy5yZW1vdmVEYWxpdGVNZXNzYWdlLFxuICAgICAgc2FsdGlzZUltYWdlOiBkYXRhLnVybHMuc2FsdGlzZUltYWdlLFxuICAgIH0sXG4gICAgbWVzc2FnZXM6IFtdLFxuICB9O1xufVxuXG4vKioqKioqKioqKi9cbi8qIHVwZGF0ZSAqL1xuLyoqKioqKioqKiovXG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgYXdhaXQgZ2V0TWVzc2FnZXMoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXMoKSB7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHt9LCBcInBvc3RcIik7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZGFsaXRlTWVzc2FnZXMsIHJlcSk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwLmpzb24oKTtcbiAgbW9kZWwubWVzc2FnZXMgPSBkYXRhLm1lc3NhZ2VzLm1hcChtZXNzYWdlID0+ICh7XG4gICAgaWQ6IG1lc3NhZ2UuaWQsXG4gICAgdGl0bGU6IG1lc3NhZ2UudGl0bGUsXG4gICAgdGV4dDogbWVzc2FnZS50ZXh0LFxuICAgIGNvbG91cjogbWVzc2FnZS5jb2xvdXIsXG4gICAgcmVtb3ZhYmxlOiBtZXNzYWdlLnJlbW92YWJsZSxcbiAgICBkYXRlOiBtZXNzYWdlLmRhdGUsXG4gICAgbGluazogbWVzc2FnZS5saW5rLFxuICAgIGF1dGhvcnM6IG1lc3NhZ2UuYXV0aG9ycy5tYXAoYXV0aG9yID0+ICh7XG4gICAgICBuYW1lOiBhdXRob3IubmFtZSxcbiAgICAgIHBpY3R1cmU6IGF1dGhvci5waWN0dXJlLFxuICAgIH0pKSxcbiAgfSkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZW1vdmVNZXNzYWdlKG1lc3NhZ2UsIGRpdikge1xuICBjb25zdCBkYXRhID0ge1xuICAgIGlkOiBtZXNzYWdlLmlkLFxuICB9O1xuICBjb25zdCByZXEgPSBidWlsZFJlcShkYXRhLCBcInBvc3RcIik7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMucmVtb3ZlRGFsaXRlTWVzc2FnZSwgcmVxKTtcbiAgaWYgKHJlc3Aub2spIHtcbiAgICByZW1vdmVNZXNzYWdlVmlldyhkaXYpO1xuICB9XG59XG5cbi8qKioqKioqKi9cbi8qIHZpZXcgKi9cbi8qKioqKioqKi9cblxuZnVuY3Rpb24gdmlldygpIHtcbiAgbWVzc2FnZXNWaWV3KCk7XG59XG5cbmZ1bmN0aW9uIG1lc3NhZ2VzVmlldygpIHtcbiAgY29uc3QgbWVzc2FnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2RhbGl0ZS1tZXNzYWdlc1wiKTtcbiAgaWYgKG1vZGVsLm1lc3NhZ2VzLmxlbmd0aCkge1xuICAgIG1lc3NhZ2VzLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgbW9kZWwubWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IHtcbiAgICAgIG1lc3NhZ2VzLmFwcGVuZENoaWxkKG1lc3NhZ2VWaWV3KG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlcy5yZW1vdmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXNzYWdlVmlldyhtZXNzYWdlKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWRjLWNhcmRcIik7XG5cbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGlmIChtZXNzYWdlLmxpbmspIHtcbiAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKG1lc3NhZ2UubGluayk7XG4gICAgfSk7XG4gICAgY29udGVudC5zdHlsZS5zZXRQcm9wZXJ0eShcImN1cnNvclwiLCBcInBvaW50ZXJcIik7XG4gICAgY29udGVudC50aXRsZSA9IG1lc3NhZ2UubGluaztcbiAgfVxuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdGl0bGUuY2xhc3NMaXN0LmFkZChcIm1kYy10eXBvZ3JhcGh5LS10aXRsZVwiLCBcImJvbGRcIik7XG4gIHRpdGxlLnRleHRDb250ZW50ID0gbWVzc2FnZS50aXRsZTtcbiAgY29udGVudC5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgY29uc3QgY2FwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNhcHRpb24uY2xhc3NMaXN0LmFkZChcIm1kYy10eXBvZ3JhcGh5LS1jYXB0aW9uXCIpO1xuICBjYXB0aW9uLnRleHRDb250ZW50ID0gbWVzc2FnZS5kYXRlO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGNhcHRpb24pO1xuXG4gIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICB0ZXh0LmNsYXNzTGlzdC5hZGQoXCJtZGMtdHlwb2dyYXBoeS0tYm9keTFcIik7XG4gIHRleHQuaW5uZXJIVE1MID0gbWVzc2FnZS50ZXh0O1xuICBjb250ZW50LmFwcGVuZENoaWxkKHRleHQpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuICBjb25zdCBhY3Rpb25zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgYWN0aW9ucy5jbGFzc0xpc3QuYWRkKFwibWRjLWNhcmRfX2FjdGlvbnNcIik7XG5cbiAgY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgaW1hZ2VzLmNsYXNzTGlzdC5hZGQoXCJtZGMtY2FyZF9fYWN0aW9uLWJ1dHRvbnNcIik7XG4gIGlmIChtZXNzYWdlLmF1dGhvcnMubGVuZ3RoKSB7XG4gICAgY29uc3QgYXV0aG9yc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYXV0aG9yc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZGFsaXRlLW1lc3NhZ2VfX2F1dGhvcnNcIik7XG4gICAgbWVzc2FnZS5hdXRob3JzLmZvckVhY2goYXV0aG9yID0+IHtcbiAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICBpbWcuY2xhc3NMaXN0LmFkZChcImRhbGl0ZS1tZXNzYWdlX19hdXRob3JzX2F1dGhvclwiKTtcbiAgICAgIGltZy50aXRsZSA9IGF1dGhvci5uYW1lO1xuICAgICAgaW1nLnNldEF0dHJpYnV0ZShcbiAgICAgICAgXCJzcmNcIixcbiAgICAgICAgYXV0aG9yLnBpY3R1cmUgPyBhdXRob3IucGljdHVyZSA6IG1vZGVsLnVybHMuc2FsdGlzZUltYWdlLFxuICAgICAgKTtcbiAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgYFBpY3R1cmUgb2YgJHthdXRob3IubmFtZX1gKTtcbiAgICAgIGF1dGhvcnNDb250YWluZXIuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICB9KTtcbiAgICBpbWFnZXMuYXBwZW5kQ2hpbGQoYXV0aG9yc0NvbnRhaW5lcik7XG4gIH1cbiAgYWN0aW9ucy5hcHBlbmRDaGlsZChpbWFnZXMpO1xuXG4gIGlmIChtZXNzYWdlLnJlbW92YWJsZSkge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJ1dHRvbnMuY2xhc3NMaXN0LmFkZChcIm1kYy1jYXJkX19hY3Rpb24taWNvbnNcIik7XG4gICAgY29uc3QgcmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgcmVtb3ZlLmNsYXNzTGlzdC5hZGQoXG4gICAgICBcIm1kYy1pY29uLXRvZ2dsZVwiLFxuICAgICAgXCJtYXRlcmlhbC1pY29uc1wiLFxuICAgICAgXCJtZGMtdGhlbWUtLXByaW1hcnlcIixcbiAgICApO1xuICAgIHJlbW92ZS50ZXh0Q29udGVudCA9IFwiY2xlYXJcIjtcbiAgICByZW1vdmUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlbW92ZU1lc3NhZ2UobWVzc2FnZSwgY29udGFpbmVyKTtcbiAgICB9KTtcbiAgICBidXR0b25zLmFwcGVuZENoaWxkKHJlbW92ZSk7XG4gICAgYWN0aW9ucy5hcHBlbmRDaGlsZChidXR0b25zKTtcbiAgfVxuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChhY3Rpb25zKTtcbiAgY29udGFpbmVyLnN0eWxlLnNldFByb3BlcnR5KFwiYmFja2dyb3VuZC1jb2xvclwiLCBtZXNzYWdlLmNvbG91cik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWVzc2FnZVZpZXcobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlLmNoaWxkRWxlbWVudENvdW50ID09IDMpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlKCk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgfVxufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0KGRhdGEpIHtcbiAgaW5pdE1vZGVsKGRhdGEpO1xuICBhd2FpdCB1cGRhdGUoKTtcbiAgdmlldygpO1xufVxuIiwiaW1wb3J0IHsgaW5pdCBhcyBpbml0TWVzc2FnZXMgfSBmcm9tIFwiLi9kYXNoYm9hcmQvbWVzc2FnZXMuanNcIjtcblxuLyoqKioqKioqL1xuLyogaW5pdCAqL1xuLyoqKioqKioqL1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdChkYXRhKSB7XG4gIGluaXRNZXNzYWdlcyh7XG4gICAgdXJsczoge1xuICAgICAgZGFsaXRlTWVzc2FnZXM6IGRhdGEudXJscy5kYWxpdGVfbWVzc2FnZXMsXG4gICAgICByZW1vdmVEYWxpdGVNZXNzYWdlOiBkYXRhLnVybHMucmVtb3ZlX2RhbGl0ZV9tZXNzYWdlLFxuICAgICAgc2FsdGlzZUltYWdlOiBkYXRhLnVybHMuc2FsdGlzZV9pbWFnZSxcbiAgICB9LFxuICB9KTtcbn1cbiIsImltcG9ydCB7IGJ1aWxkUmVxIH0gZnJvbSBcIi4uL2FqYXguanNcIjtcbi8qKioqKioqKiovXG4vKiBtb2RlbCAqL1xuLyoqKioqKioqKi9cblxubGV0IG1vZGVsO1xuXG5mdW5jdGlvbiBpbml0TW9kZWwodXJscykge1xuICBtb2RlbCA9IHtcbiAgICB1cmxzOiB7XG4gICAgICBldmFsdWF0ZVJhdGlvbmFsZTogdXJscy5ldmFsdWF0ZVJhdGlvbmFsZSxcbiAgICB9LFxuICB9O1xufVxuXG4vKioqKioqKioqKi9cbi8qIHVwZGF0ZSAqL1xuLyoqKioqKioqKiovXG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgdXBkYXRlUmF0aW9uYWxlc0V2YWx1YXRpb25BdHRyaWJ1dGVzKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJhdGlvbmFsZXNFdmFsdWF0aW9uQXR0cmlidXRlcygpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jdXN0b20tcmVwb3J0X19yYXRpb25hbGVcIikuZm9yRWFjaChyYXRpb25hbGUgPT4ge1xuICAgIHVwZGF0ZVJhdGlvbmFsZUV2YWx1YXRpb25BdHRyaWJ1dGVzKHJhdGlvbmFsZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVSYXRpb25hbGVFdmFsdWF0aW9uQXR0cmlidXRlcyhyYXRpb25hbGUpIHtcbiAgY29uc3QgZXZhbHVhdGlvbiA9IHJhdGlvbmFsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNjb3JlXCIpO1xuICBpZiAoZXZhbHVhdGlvbiAhPSBcIlwiKSB7XG4gICAgY29uc3QgZXZhbHVhdGlvbl8gPSBwYXJzZUludChldmFsdWF0aW9uKTtcbiAgICBpZiAoZXZhbHVhdGlvbl8gPT0gMCkge1xuICAgICAgcmF0aW9uYWxlLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZ1wiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZsYWdnZWRcIiwgXCJcIik7XG4gICAgICByYXRpb25hbGUucXVlcnlTZWxlY3RvckFsbChcIi5zdGFyXCIpLmZvckVhY2goKHN0YXIsIGkpID0+IHtcbiAgICAgICAgc3Rhci5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN0YXJyZWRcIik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF0aW9uYWxlLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZ1wiKS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWZsYWdnZWRcIik7XG4gICAgICByYXRpb25hbGUucXVlcnlTZWxlY3RvckFsbChcIi5zdGFyXCIpLmZvckVhY2goKHN0YXIsIGkpID0+IHtcbiAgICAgICAgaWYgKDMgLSBpIDw9IGV2YWx1YXRpb25fKSB7XG4gICAgICAgICAgc3Rhci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YXJyZWRcIiwgXCJcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Rhci5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN0YXJyZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBmbGFnUmF0aW9uYWxlKGZsYWcpIHtcbiAgY29uc3QgcmF0aW9uYWxlID0gZmxhZy5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgaWQ6IGZsYWcucGFyZW50Tm9kZS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIiksXG4gICAgc2NvcmU6IDAsXG4gICAgcmVkaXJlY3Q6IGZhbHNlLFxuICB9O1xuICBjb25zdCByZXEgPSBidWlsZFJlcShkYXRhLCBcInBvc3RcIik7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZXZhbHVhdGVSYXRpb25hbGUsIHJlcSk7XG4gIGlmIChyZXNwLm9rKSB7XG4gICAgZmxhZy5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZsYWdnZWRcIiwgXCJcIik7XG4gICAgcmF0aW9uYWxlLnNldEF0dHJpYnV0ZShcImRhdGEtc2NvcmVcIiwgXCIwXCIpO1xuICB9XG4gIHVwZGF0ZVJhdGlvbmFsZUV2YWx1YXRpb25BdHRyaWJ1dGVzKHJhdGlvbmFsZSk7XG4gIHJhdGlvbmFsZUV2YWx1YXRpb25WaWV3KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV2YWx1YXRlUmF0aW9uYWxlKHN0YXIsIHNjb3JlKSB7XG4gIGNvbnN0IHJhdGlvbmFsZSA9IHN0YXIucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICBjb25zdCBkYXRhID0ge1xuICAgIGlkOiBzdGFyLnBhcmVudE5vZGUucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpLFxuICAgIHNjb3JlOiBzY29yZSxcbiAgICByZWRpcmVjdDogZmFsc2UsXG4gIH07XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKGRhdGEsIFwicG9zdFwiKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2gobW9kZWwudXJscy5ldmFsdWF0ZVJhdGlvbmFsZSwgcmVxKTtcbiAgaWYgKHJlc3Aub2spIHtcbiAgICBmbGFnLnNldEF0dHJpYnV0ZShcImRhdGEtZmxhZ2dlZFwiLCBcIlwiKTtcbiAgICByYXRpb25hbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1zY29yZVwiLCBgJHtzY29yZX1gKTtcbiAgfVxuICB1cGRhdGVSYXRpb25hbGVFdmFsdWF0aW9uQXR0cmlidXRlcyhyYXRpb25hbGUpO1xuICByYXRpb25hbGVFdmFsdWF0aW9uVmlldygpO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbmZ1bmN0aW9uIHZpZXcoKSB7XG4gIHJhdGlvbmFsZUV2YWx1YXRpb25WaWV3KCk7XG59XG5cbmZ1bmN0aW9uIHJhdGlvbmFsZUV2YWx1YXRpb25WaWV3KCkge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLmN1c3RvbS1yZXBvcnRfX3JhdGlvbmFsZV9fZXZhbHVhdGlvblwiKVxuICAgIC5mb3JFYWNoKHJhdGlvbmFsZSA9PiB7XG4gICAgICB0b2dnbGVGbGFnSG92ZXIocmF0aW9uYWxlLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZ1wiKSk7XG4gICAgICByYXRpb25hbGVcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3RhclwiKVxuICAgICAgICAuZm9yRWFjaChzdGFyID0+IHRvZ2dsZVN0YXJIb3ZlcihzdGFyKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUZsYWdIb3ZlcihmbGFnLCBob3ZlcmluZyA9IGZhbHNlKSB7XG4gIGlmIChob3ZlcmluZyB8fCBmbGFnLmhhc0F0dHJpYnV0ZShcImRhdGEtZmxhZ2dlZFwiKSkge1xuICAgIGZsYWcudGV4dENvbnRlbnQgPSBcImZsYWdcIjtcbiAgfSBlbHNlIHtcbiAgICBmbGFnLnRleHRDb250ZW50ID0gXCJvdXRsaW5lZF9mbGFnXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9nZ2xlU3RhckhvdmVyKHN0YXIsIGhvdmVyaW5nID0gZmFsc2UpIHtcbiAgY29uc3Qgc3RhcnMgPSBbLi4uc3Rhci5wYXJlbnROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzdGFyXCIpXTtcbiAgY29uc3QgaWR4ID0gc3RhcnMuaW5kZXhPZihzdGFyKTtcbiAgc3RhcnMuZm9yRWFjaCgoc3RhciwgaSkgPT4ge1xuICAgIGlmIChzdGFyLmhhc0F0dHJpYnV0ZShcImRhdGEtc3RhcnJlZFwiKSB8fCAoaG92ZXJpbmcgJiYgaSA+PSBpZHgpKSB7XG4gICAgICBzdGFyLnRleHRDb250ZW50ID0gXCJzdGFyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXIudGV4dENvbnRlbnQgPSBcInN0YXJfYm9yZGVyXCI7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqKioqKioqKioqKiovXG4vKiBsaXN0ZW5lcnMgKi9cbi8qKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBpbml0TGlzdGVuZXJzKCkge1xuICBhZGRGbGFnTGlzdGVuZXJzKCk7XG4gIGFkZEV2YWx1YXRlTGlzdGVuZXJzKCk7XG59XG5cbmZ1bmN0aW9uIGFkZEZsYWdMaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY3VzdG9tLXJlcG9ydF9fcmF0aW9uYWxlX19ldmFsdWF0aW9uIC5mbGFnXCIpXG4gICAgLmZvckVhY2goZmxhZyA9PiB7XG4gICAgICBmbGFnLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsICgpID0+IHRvZ2dsZUZsYWdIb3ZlcihmbGFnLCB0cnVlKSk7XG4gICAgICBmbGFnLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHRvZ2dsZUZsYWdIb3ZlcihmbGFnLCBmYWxzZSkpO1xuICAgICAgZmxhZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gZmxhZ1JhdGlvbmFsZShmbGFnKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2YWx1YXRlTGlzdGVuZXJzKCkge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiLmN1c3RvbS1yZXBvcnRfX3JhdGlvbmFsZV9fZXZhbHVhdGlvblwiKVxuICAgIC5mb3JFYWNoKHJhdGlvbmFsZSA9PiB7XG4gICAgICByYXRpb25hbGUucXVlcnlTZWxlY3RvckFsbChcIi5zdGFyXCIpLmZvckVhY2goKHN0YXIsIGkpID0+IHtcbiAgICAgICAgc3Rhci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoKSA9PiB0b2dnbGVTdGFySG92ZXIoc3RhciwgdHJ1ZSkpO1xuICAgICAgICBzdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+XG4gICAgICAgICAgdG9nZ2xlU3RhckhvdmVyKHN0YXIsIGZhbHNlKSxcbiAgICAgICAgKTtcbiAgICAgICAgc3Rhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gZXZhbHVhdGVSYXRpb25hbGUoc3RhciwgMyAtIGkpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHVybHMpIHtcbiAgaW5pdE1vZGVsKHVybHMpO1xuICB1cGRhdGUoKTtcbiAgdmlldygpO1xuICBpbml0TGlzdGVuZXJzKCk7XG59XG4iLCIvLyBAZmxvd1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihub2RlOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZXRpbWUoZGF0ZXRpbWU6IERhdGUpOiBzdHJpbmcge1xuICByZXR1cm4gKFxuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyB5ZWFyOiBcIm51bWVyaWNcIiB9KSArXG4gICAgXCItXCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBtb250aDogXCIyLWRpZ2l0XCIgfSkgK1xuICAgIFwiLVwiICtcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgZGF5OiBcIjItZGlnaXRcIiB9KSArXG4gICAgXCIgXCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBob3VyOiBcIjItZGlnaXRcIiwgaG91cjEyOiBmYWxzZSB9KSArXG4gICAgXCI6XCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBtaW51dGU6IFwiMi1kaWdpdFwiIH0pXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdmcobmFtZTogc3RyaW5nLCB1c2VTcHJpdGU6IGJvb2xlYW4gPSB0cnVlKTogRWxlbWVudCB7XG4gIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuICBjb25zdCB1c2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInVzZVwiKTtcbiAgdXNlLnNldEF0dHJpYnV0ZU5TKFxuICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIFwiaHJlZlwiLFxuICAgIHN2Z0xpbmsobmFtZSwgdXNlU3ByaXRlKSxcbiAgKTtcbiAgc3ZnLmFwcGVuZCh1c2UpO1xuICByZXR1cm4gc3ZnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ZnTGluayhuYW1lOiBzdHJpbmcsIHVzZVNwcml0ZTogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICBpZiAodXNlU3ByaXRlKSB7XG4gICAgcmV0dXJuIGAjJHtuYW1lfWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArXG4gICAgICBcIi8vXCIgK1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3QgK1xuICAgICAgXCIvc3RhdGljL3BlZXJpbnN0L2ljb25zLnN2ZyNcIiArXG4gICAgICBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0FsZXJ0KG1zZzogc3RyaW5nKSB7XG4gIGNvbnN0IGZ1bGxQYWdlQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZnVsbFBhZ2VCb3guY2xhc3NMaXN0LmFkZChcImFsZXJ0LWJveF9fZnVsbC1wYWdlXCIpO1xuICBmdWxsUGFnZUJveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZnVsbFBhZ2VCb3gucGFyZW50Tm9kZT8ucmVtb3ZlQ2hpbGQoZnVsbFBhZ2VCb3gpO1xuICB9KTtcbiAgZG9jdW1lbnQuYm9keT8uYXBwZW5kQ2hpbGQoZnVsbFBhZ2VCb3gpO1xuXG4gIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGJveC5jbGFzc0xpc3QuYWRkKFwiYWxlcnQtYm94X19ib3hcIik7XG4gIGJveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PlxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpLFxuICApO1xuICBmdWxsUGFnZUJveC5hcHBlbmRDaGlsZChib3gpO1xuXG4gIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgc3Bhbi5jbGFzc0xpc3QuYWRkKFwiYWxlcnQtYm94X19tc2dcIik7XG4gIHNwYW4udGV4dENvbnRlbnQgPSBtc2c7XG4gIGJveC5hcHBlbmRDaGlsZChzcGFuKTtcblxuICBjb25zdCBvayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIG9rLmNsYXNzTGlzdC5hZGQoXCJhbGVydC1ib3hfX2J0blwiLCBcIm1kYy1idXR0b25cIiwgXCJtZGMtYnV0dG9uLS11bmVsZXZhdGVkXCIpO1xuICBvay50ZXh0Q29udGVudCA9IFwiT2tcIjtcbiAgYm94LmFwcGVuZENoaWxkKG9rKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCB0ZXh0ID0gXCJcIiwgYXR0cmlidXRlcyA9IHt9KSB7XG4gIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0ZXh0KSB7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH1cbiAgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykuZm9yRWFjaCgoW2tleSwgdmFsXSkgPT4ge1xuICAgIGVsZW0uc2V0QXR0cmlidXRlKGtleSwgdmFsKTtcbiAgfSk7XG4gIHJldHVybiBlbGVtO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgY2xlYXIsIGNyZWF0ZVN2ZyB9IGZyb20gXCIuLi8uLi91dGlscy5qc1wiO1xuXG4vKioqKioqKioqL1xuLyogbW9kZWwgKi9cbi8qKioqKioqKiovXG5cbmV4cG9ydCB0eXBlIE5vdGlmaWNhdGlvbiA9IHtcbiAgdGV4dDogc3RyaW5nLFxuICBpblByb2dyZXNzOiBib29sZWFuLFxuICBlcnJvcjogYm9vbGVhbixcbiAgb25DbGljazogKCkgPT4gUHJvbWlzZTx2b2lkPixcbiAgb25DbG9zZUNsaWNrOiAoKSA9PiBQcm9taXNlPHZvaWQ+LFxufTtcblxubGV0IG1vZGVsOiB7XG4gIG5vdGlmaWNhdGlvbnNPcGVuOiBib29sZWFuLFxuICBub3RpZmljYXRpb25zOiBBcnJheTxOb3RpZmljYXRpb24+LFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZGVsKCk6IHZvaWQge1xuICBtb2RlbCA9IHtcbiAgICBub3RpZmljYXRpb25zT3BlbjogZmFsc2UsXG4gICAgbm90aWZpY2F0aW9uczogW10sXG4gIH07XG59XG5cbi8qKioqKioqKioqL1xuLyogdXBkYXRlICovXG4vKioqKioqKioqKi9cblxuZnVuY3Rpb24gdG9nZ2xlTm90aWZpY2F0aW9ucygpOiB2b2lkIHtcbiAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ub3RpZmljYXRpb25zXCIpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmhlYWRlci0tdG9nZ2xhYmxlID4gKlwiKS5mb3JFYWNoKGhlYWRlcl8gPT4ge1xuICAgIGlmIChoZWFkZXJfICE9IGhlYWRlciAmJiBoZWFkZXJfLmhhc0F0dHJpYnV0ZShcIm9wZW5cIikpIHtcbiAgICAgIGlmIChoZWFkZXJfLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgaGVhZGVyXy5zaGFkb3dSb290XG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19pY29uXCIpXG4gICAgICAgICAgLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiY2xpY2tcIikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVhZGVyX1xuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlcl9faWNvblwiKVxuICAgICAgICAgIC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImNsaWNrXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBtb2RlbC5ub3RpZmljYXRpb25zT3BlbiA9ICFtb2RlbC5ub3RpZmljYXRpb25zT3BlbjtcbiAgbm90aWZpY2F0aW9uc1ZpZXcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU5vdGlmaWNhdGlvbnMobm90aWZpY2F0aW9uczogQXJyYXk8Tm90aWZpY2F0aW9uPik6IHZvaWQge1xuICBtb2RlbC5ub3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9ucztcbiAgbm90aWZpY2F0aW9uc1ZpZXcoKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJBbGwoKTogdm9pZCB7XG4gIG1vZGVsLm5vdGlmaWNhdGlvbnMuZm9yRWFjaChub3RpZmljYXRpb24gPT4ge1xuICAgIG5vdGlmaWNhdGlvbi5vbkNsb3NlQ2xpY2soKTtcbiAgfSk7XG59XG5cbi8qKioqKioqKi9cbi8qIHZpZXcgKi9cbi8qKioqKioqKi9cblxuZnVuY3Rpb24gdmlldygpOiB2b2lkIHtcbiAgbm90aWZpY2F0aW9uc1ZpZXcoKTtcbn1cblxuZnVuY3Rpb24gbm90aWZpY2F0aW9uc1ZpZXcoKTogdm9pZCB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5vdGlmaWNhdGlvbnNcIik7XG4gIGNvbnN0IGJhZGdlID0gbm90aWZpY2F0aW9ucz8ucXVlcnlTZWxlY3RvcihcIi5ub3RpZmljYXRpb25zX19pY29uX19iYWRnZVwiKTtcbiAgY29uc3Qgbm90aWZpY2F0aW9uc0xpc3QgPSBub3RpZmljYXRpb25zPy5xdWVyeVNlbGVjdG9yKFxuICAgIFwiLm5vdGlmaWNhdGlvbnNfX25vdGlmaWNhdGlvbnNcIixcbiAgKTtcblxuICBpZiAoIW5vdGlmaWNhdGlvbnMgfHwgIWJhZGdlIHx8ICFub3RpZmljYXRpb25zTGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNvbXBsZXRlZE5vdGlmaWNhdGlvbnMgPSBtb2RlbC5ub3RpZmljYXRpb25zLmZpbHRlcihcbiAgICBub3RpZmljYXRpb24gPT4gIW5vdGlmaWNhdGlvbi5pblByb2dyZXNzLFxuICApO1xuICBpZiAoY29tcGxldGVkTm90aWZpY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgYmFkZ2UudGV4dENvbnRlbnQgPSBjb21wbGV0ZWROb3RpZmljYXRpb25zLmxlbmd0aC50b1N0cmluZygpO1xuICAgIGJhZGdlLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgfSBlbHNlIHtcbiAgICBiYWRnZS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgYmFkZ2Uuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICB9XG5cbiAgY2xlYXIobm90aWZpY2F0aW9uc0xpc3QpO1xuXG4gIGlmIChtb2RlbC5ub3RpZmljYXRpb25zLmxlbmd0aCkge1xuICAgIG1vZGVsLm5vdGlmaWNhdGlvbnMubWFwKGZ1bmN0aW9uKG5vdGlmaWNhdGlvbikge1xuICAgICAgbm90aWZpY2F0aW9uc0xpc3QuYXBwZW5kQ2hpbGQobm90aWZpY2F0aW9uVmlldyhub3RpZmljYXRpb24pKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIubm90aWZpY2F0aW9uc19fY2xlYXItYWxsLWJ0blwiKVxuICAgICAgLnJlbW92ZUF0dHJpYnV0ZShcImhpZGRlblwiKTtcbiAgfSBlbHNlIHtcbiAgICBub3RpZmljYXRpb25zTGlzdC5hcHBlbmRDaGlsZChub05vdGlmaWNhdGlvblZpZXcoKSk7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLm5vdGlmaWNhdGlvbnNfX2NsZWFyLWFsbC1idG5cIilcbiAgICAgIC5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJcIik7XG4gIH1cblxuICBpZiAobW9kZWwubm90aWZpY2F0aW9ucy5zb21lKG5vdGlmaWNhdGlvbiA9PiBub3RpZmljYXRpb24uaW5Qcm9ncmVzcykpIHtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIubm90aWZpY2F0aW9uc19fc3Bpbm5lclwiKVxuICAgICAgPy5jbGFzc0xpc3QuYWRkKFwibm90aWZpY2F0aW9uc19fc3Bpbm5lci0tbG9hZGluZ1wiKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIubm90aWZpY2F0aW9uc19fc3Bpbm5lclwiKVxuICAgICAgPy5jbGFzc0xpc3QucmVtb3ZlKFwibm90aWZpY2F0aW9uc19fc3Bpbm5lci0tbG9hZGluZ1wiKTtcbiAgfVxuXG4gIGlmIChtb2RlbC5ub3RpZmljYXRpb25zT3Blbikge1xuICAgIG5vdGlmaWNhdGlvbnMuc2V0QXR0cmlidXRlKFwib3BlblwiLCBcIlwiKTtcbiAgICBub3RpZmljYXRpb25zLmNsYXNzTGlzdC5hZGQoXCJub3RpZmljYXRpb25zLS1vcGVuXCIpO1xuICB9IGVsc2Uge1xuICAgIG5vdGlmaWNhdGlvbnMucmVtb3ZlQXR0cmlidXRlKFwib3BlblwiKTtcbiAgICBub3RpZmljYXRpb25zLmNsYXNzTGlzdC5yZW1vdmUoXCJub3RpZmljYXRpb25zLS1vcGVuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vdGlmaWNhdGlvblZpZXcobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb24pOiBIVE1MRGl2RWxlbWVudCB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdi5jbGFzc0xpc3QuYWRkKFwibm90aWZpY2F0aW9uXCIpO1xuICBkaXYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG5vdGlmaWNhdGlvbi5vbkNsaWNrKTtcblxuICBpZiAobm90aWZpY2F0aW9uLmluUHJvZ3Jlc3MpIHtcbiAgICBjb25zdCBzcGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxvYWRpbmctc3Bpbm5lclwiKTtcbiAgICBzcGlubmVyLmNsYXNzTGlzdC5hZGQoXCJub3RpZmljYXRpb25fX3NwaW5uZXJcIik7XG4gICAgZGl2LmFwcGVuZENoaWxkKHNwaW5uZXIpO1xuICB9IGVsc2Uge1xuICAgIGxldCBpY29uO1xuICAgIGlmIChub3RpZmljYXRpb24uZXJyb3IpIHtcbiAgICAgIGljb24gPSBjcmVhdGVTdmcoXCJlcnJvclwiKTtcbiAgICAgIGljb24uY2xhc3NMaXN0LmFkZChcIm5vdGlmaWNhdGlvbl9faWNvbi0tZXJyb3JcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKFwibm90aWZpY2F0aW9uLS1jb21wbGV0ZWRcIik7XG4gICAgICBpY29uID0gY3JlYXRlU3ZnKFwiY2xvdWRfZG93bmxvYWRcIik7XG4gICAgfVxuICAgIGljb24uY2xhc3NMaXN0LmFkZChcIm5vdGlmaWNhdGlvbl9faWNvblwiKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaWNvbik7XG4gIH1cblxuICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICBkZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwibm90aWZpY2F0aW9uX19kZXNjcmlwdGlvblwiKTtcbiAgZGVzY3JpcHRpb24uaW5uZXJIVE1MID0gbm90aWZpY2F0aW9uLnRleHQ7XG4gIGRpdi5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbik7XG4gIGNvbnN0IHJlbW92ZSA9IGNyZWF0ZVN2ZyhcImNsb3NlXCIpO1xuICByZW1vdmUuY2xhc3NMaXN0LmFkZChcIm5vdGlmaWNhdGlvbl9fY2xvc2VcIik7XG4gIHJlbW92ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbm90aWZpY2F0aW9uLm9uQ2xvc2VDbGljayk7XG4gIGRpdi5hcHBlbmRDaGlsZChyZW1vdmUpO1xuXG4gIHJldHVybiBkaXY7XG59XG5cbmZ1bmN0aW9uIG5vTm90aWZpY2F0aW9uVmlldygpOiBIVE1MRGl2RWxlbWVudCB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdi50ZXh0Q29udGVudCA9IFwiTm8gbmV3IG5vdGlmaWNhdGlvbnNcIjtcbiAgcmV0dXJuIGRpdjtcbn1cblxuLyoqKioqKioqKioqKiovXG4vKiBsaXN0ZW5lcnMgKi9cbi8qKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gIGFkZE5vdGlmaWNhdGlvbnNPcGVuTGlzdGVuZXIoKTtcbiAgYWRkQ2xlYXJBbGxMaXN0ZW5lcigpO1xufVxuXG5mdW5jdGlvbiBhZGROb3RpZmljYXRpb25zT3Blbkxpc3RlbmVyKCk6IHZvaWQge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLm5vdGlmaWNhdGlvbnNcIilcbiAgICA/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIubm90aWZpY2F0aW9uc19faWNvblwiKVxuICAgID8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICB0b2dnbGVOb3RpZmljYXRpb25zKCk7XG4gICAgfSk7XG4gIGRvY3VtZW50LmJvZHk/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgIGlmIChtb2RlbC5ub3RpZmljYXRpb25zT3Blbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0b2dnbGVOb3RpZmljYXRpb25zKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xlYXJBbGxMaXN0ZW5lcigpOiB2b2lkIHtcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvcihcIi5ub3RpZmljYXRpb25zX19jbGVhci1hbGwtYnRuXCIpXG4gICAgPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gY2xlYXJBbGwoKSk7XG59XG5cbi8qKioqKioqKi9cbi8qIGluaXQgKi9cbi8qKioqKioqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKTogdm9pZCB7XG4gIGluaXRNb2RlbCgpO1xuICB2aWV3KCk7XG4gIGluaXRFdmVudExpc3RlbmVycygpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IGJ1aWxkUmVxIH0gZnJvbSBcIi4uL2FqYXguanNcIjtcbmltcG9ydCB7IHVwZGF0ZU5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi9oZWFkZXIvbm90aWZpY2F0aW9ucy5qc1wiO1xuaW1wb3J0IHR5cGUgeyBOb3RpZmljYXRpb24gfSBmcm9tIFwiLi9oZWFkZXIvbm90aWZpY2F0aW9ucy5qc1wiO1xuXG4vKioqKioqKioqL1xuLyogbW9kZWwgKi9cbi8qKioqKioqKiovXG5cbmNvbnN0IENIRUNLX0VWRVJZID0gMTtcblxudHlwZSBUYXNrID0ge1xuICBpZDogc3RyaW5nLFxuICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICBjb21wbGV0ZWQ6IGJvb2xlYW4sXG4gIGRhdGV0aW1lOiBEYXRlLFxuICBlcnJvcjogYm9vbGVhbixcbn07XG5cbmxldCBtb2RlbDoge1xuICB1cmxzOiB7XG4gICAgcmVxdWVzdEdyYWRlYm9vazogc3RyaW5nLFxuICAgIGdyYWRlYm9va1Jlc3VsdDogc3RyaW5nLFxuICAgIHJlbW92ZUZhaWxlZEdyYWRlYm9vazogc3RyaW5nLFxuICAgIGRvd25sb2FkR3JhZGVib29rOiBzdHJpbmcsXG4gICAgdGFza3M6IHN0cmluZyxcbiAgfSxcbiAgdGFza3M6IEFycmF5PFRhc2s+LFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZGVsKHVybHM6IHtcbiAgcmVxdWVzdEdyYWRlYm9vazogc3RyaW5nLFxuICBncmFkZWJvb2tSZXN1bHQ6IHN0cmluZyxcbiAgcmVtb3ZlRmFpbGVkR3JhZGVib29rOiBzdHJpbmcsXG4gIGRvd25sb2FkR3JhZGVib29rOiBzdHJpbmcsXG4gIHRhc2tzOiBzdHJpbmcsXG59KTogdm9pZCB7XG4gIG1vZGVsID0ge1xuICAgIHRhc2tzOiBbXSxcbiAgICB1cmxzOiB7XG4gICAgICByZXF1ZXN0R3JhZGVib29rOiB1cmxzLnJlcXVlc3RHcmFkZWJvb2ssXG4gICAgICBncmFkZWJvb2tSZXN1bHQ6IHVybHMuZ3JhZGVib29rUmVzdWx0LFxuICAgICAgcmVtb3ZlRmFpbGVkR3JhZGVib29rOiB1cmxzLnJlbW92ZUZhaWxlZEdyYWRlYm9vayxcbiAgICAgIGRvd25sb2FkR3JhZGVib29rOiB1cmxzLmRvd25sb2FkR3JhZGVib29rLFxuICAgICAgdGFza3M6IHVybHMudGFza3MsXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqKioqKioqKiovXG4vKiB1cGRhdGUgKi9cbi8qKioqKioqKioqL1xuXG5mdW5jdGlvbiB1cGRhdGUoKTogdm9pZCB7XG4gIGdldFRhc2tzKCk7XG59XG5cbmZ1bmN0aW9uIGdldFRhc2tzKCk6IHZvaWQge1xuICBjb25zdCB1cmwgPSBtb2RlbC51cmxzLnRhc2tzO1xuICBjb25zdCByZXEgPSBidWlsZFJlcSh7fSwgXCJnZXRcIik7XG5cbiAgZmV0Y2godXJsLCByZXEpXG4gICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgIGluaXRUYXNrcyhkYXRhLnRhc2tzKTtcbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdFRhc2tzKFxuICBkYXRhOiBBcnJheTx7XG4gICAgaWQ6IHN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgIGNvbXBsZXRlZDogYm9vbGVhbixcbiAgICBkYXRldGltZTogc3RyaW5nLFxuICB9Pixcbik6IFByb21pc2U8dm9pZD4ge1xuICBtb2RlbC50YXNrcyA9IGRhdGFcbiAgICAubWFwKHRhc2sgPT4gKHtcbiAgICAgIGlkOiB0YXNrLmlkLFxuICAgICAgZGVzY3JpcHRpb246IHRhc2suZGVzY3JpcHRpb24sXG4gICAgICBjb21wbGV0ZWQ6IHRhc2suY29tcGxldGVkLFxuICAgICAgZGF0ZXRpbWU6IG5ldyBEYXRlKHRhc2suZGF0ZXRpbWUpLFxuICAgICAgZXJyb3I6IGZhbHNlLFxuICAgIH0pKVxuICAgIC5zb3J0KChhLCBiKSA9PlxuICAgICAgYS5kYXRldGltZSA+IGIuZGF0ZXRpbWUgPyAtMSA6IGEuZGF0ZXRpbWUgPCBiLmRhdGV0aW1lID8gMSA6IDAsXG4gICAgKTtcbiAgdXBkYXRlTm90aWZpY2F0aW9ucyhnZXROb3RpZmljYXRpb25zKCkpO1xuICBQcm9taXNlLmFsbChcbiAgICBtb2RlbC50YXNrc1xuICAgICAgLmZpbHRlcih0YXNrID0+ICF0YXNrLmNvbXBsZXRlZClcbiAgICAgIC5tYXAodGFzayA9PiBnZXRHcmFkZWJvb2tSZXN1bHQodGFzaykpLFxuICApO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0R3JhZGVib29rKGV2ZW50OiBNb3VzZUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICBjb25zdCBidXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICBjb25zdCBncm91cElkID0gYnV0dG9uLmdldEF0dHJpYnV0ZShcImRhdGEtZ3JvdXBcIik7XG4gIGNvbnN0IGFzc2lnbm1lbnRJZCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWFzc2lnbm1lbnRcIik7XG5cbiAgY29uc3QgZGF0YSA9IHtcbiAgICBncm91cF9pZDogZ3JvdXBJZCxcbiAgICBhc3NpZ25tZW50X2lkOiBhc3NpZ25tZW50SWQsXG4gIH07XG5cbiAgY29uc3QgdXJsID0gbW9kZWwudXJscy5yZXF1ZXN0R3JhZGVib29rO1xuICBjb25zdCByZXEgPSBidWlsZFJlcShkYXRhLCBcInBvc3RcIik7XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaCh1cmwsIHJlcSk7XG5cbiAgaWYgKHJlc3Auc3RhdHVzID09PSAyMDApIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcC50ZXh0KCk7XG4gICAgY29uc3QgdGl0bGUgPSBkYXRhLnNwbGl0KFwiXFxuXCIpWzBdO1xuICAgIGNvbnN0IGNzdiA9IGRhdGFcbiAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgLnNsaWNlKDEpXG4gICAgICAuam9pbihcIlxcblwiKTtcbiAgICBfZG93bmxvYWRHcmFkZWJvb2sodGl0bGUsIGNzdik7XG4gIH0gZWxzZSBpZiAocmVzcC5zdGF0dXMgPT09IDIwMSkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwLmpzb24oKTtcbiAgICBjb25zdCB0YXNrID0ge1xuICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICBkZXNjcmlwdGlvbjogZGF0YS5kZXNjcmlwdGlvbixcbiAgICAgIGNvbXBsZXRlZDogZGF0YS5jb21wbGV0ZWQsXG4gICAgICBkYXRldGltZTogbmV3IERhdGUoZGF0YS5kYXRldGltZSksXG4gICAgICBlcnJvcjogZmFsc2UsXG4gICAgfTtcbiAgICBtb2RlbC50YXNrcy51bnNoaWZ0KHRhc2spO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gZ2V0R3JhZGVib29rUmVzdWx0KHRhc2spLCAwKTtcbiAgICB1cGRhdGVOb3RpZmljYXRpb25zKGdldE5vdGlmaWNhdGlvbnMoKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cocmVzcCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0R3JhZGVib29rUmVzdWx0KHRhc2s6IFRhc2spOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgdXJsID0gbW9kZWwudXJscy5ncmFkZWJvb2tSZXN1bHQ7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHsgdGFza19pZDogdGFzay5pZCB9LCBcInBvc3RcIik7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybCwgcmVxKTtcblxuICBpZiAocmVzcC5zdGF0dXMgPT0gMjAwKSB7XG4gICAgdGFzay5jb21wbGV0ZWQgPSB0cnVlO1xuICAgIHVwZGF0ZU5vdGlmaWNhdGlvbnMoZ2V0Tm90aWZpY2F0aW9ucygpKTtcbiAgfSBlbHNlIGlmIChyZXNwLnN0YXR1cyA9PSAyMDIpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IGdldEdyYWRlYm9va1Jlc3VsdCh0YXNrKSwgQ0hFQ0tfRVZFUlkgKiAxMDAwKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRhc2suY29tcGxldGVkID0gdHJ1ZTtcbiAgICB0YXNrLmVycm9yID0gdHJ1ZTtcbiAgICB1cGRhdGVOb3RpZmljYXRpb25zKGdldE5vdGlmaWNhdGlvbnMoKSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlR3JhZGVib29rRXJyb3IodGFzazogVGFzayk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB1cmwgPSBtb2RlbC51cmxzLnJlbW92ZUZhaWxlZEdyYWRlYm9vaztcbiAgY29uc3QgcmVxID0gYnVpbGRSZXEoeyB0YXNrX2lkOiB0YXNrLmlkIH0sIFwicG9zdFwiKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godXJsLCByZXEpO1xuICBpZiAocmVzcC5vaykge1xuICAgIG1vZGVsLnRhc2tzID0gbW9kZWwudGFza3MuZmlsdGVyKHQgPT4gdC5pZCAhPT0gdGFzay5pZCk7XG4gIH1cbiAgdXBkYXRlTm90aWZpY2F0aW9ucyhnZXROb3RpZmljYXRpb25zKCkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZEdyYWRlYm9vayh0YXNrOiBUYXNrKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgdGFza19pZDogdGFzay5pZCxcbiAgfTtcbiAgY29uc3QgdXJsID0gbW9kZWwudXJscy5kb3dubG9hZEdyYWRlYm9vaztcbiAgY29uc3QgcmVxID0gYnVpbGRSZXEoZGF0YSwgXCJwb3N0XCIpO1xuICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godXJsLCByZXEpO1xuXG4gIGlmIChyZXNwLm9rKSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3AudGV4dCgpO1xuICAgIGNvbnN0IHRpdGxlID0gZGF0YS5zcGxpdChcIlxcblwiKVswXTtcbiAgICBjb25zdCBjc3YgPSBkYXRhXG4gICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgIC5zbGljZSgxKVxuICAgICAgLmpvaW4oXCJcXG5cIik7XG4gICAgX2Rvd25sb2FkR3JhZGVib29rKHRpdGxlLCBjc3YpO1xuICAgIG1vZGVsLnRhc2tzID0gbW9kZWwudGFza3MuZmlsdGVyKHQgPT4gdC5pZCAhPSB0YXNrLmlkKTtcbiAgICB1cGRhdGVOb3RpZmljYXRpb25zKGdldE5vdGlmaWNhdGlvbnMoKSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cocmVzcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2Rvd25sb2FkR3JhZGVib29rKHRpdGxlOiBzdHJpbmcsIGNzdjogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgYS5ocmVmID0gYGRhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCwgJHtlc2NhcGUoY3N2KX1gO1xuICBhLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gIGEuZG93bmxvYWQgPSB0aXRsZTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgYS5jbGljaygpO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpO1xufVxuXG5mdW5jdGlvbiBnZXROb3RpZmljYXRpb25zKCk6IEFycmF5PE5vdGlmaWNhdGlvbj4ge1xuICByZXR1cm4gbW9kZWwudGFza3MubWFwKHRhc2sgPT4gKHtcbiAgICB0ZXh0OiB0YXNrLmNvbXBsZXRlZFxuICAgICAgPyB0YXNrLmVycm9yXG4gICAgICAgID8gYFRoZXJlIHdhcyBhbiBlcnJvciBjcmVhdGluZyB0aGUgZ3JhZGVib29rIGZvciAke3Rhc2suZGVzY3JpcHRpb259LmBcbiAgICAgICAgOiBgVGhlICR7dGFzay5kZXNjcmlwdGlvbn0gaXMgcmVhZHkuYFxuICAgICAgOiBgQ29tcHV0aW5nIHRoZSAke3Rhc2suZGVzY3JpcHRpb259Li4uYCxcbiAgICBpblByb2dyZXNzOiAhdGFzay5jb21wbGV0ZWQsXG4gICAgZXJyb3I6IHRhc2suZXJyb3IsXG4gICAgb25DbGljazpcbiAgICAgIHRhc2suY29tcGxldGVkICYmICF0YXNrLmVycm9yXG4gICAgICAgID8gYXN5bmMgKCkgPT4gYXdhaXQgZG93bmxvYWRHcmFkZWJvb2sodGFzaylcbiAgICAgICAgOiBhc3luYyAoKSA9PiB1bmRlZmluZWQsXG4gICAgb25DbG9zZUNsaWNrOiBhc3luYyAoKSA9PiBhd2FpdCByZW1vdmVHcmFkZWJvb2tFcnJvcih0YXNrKSxcbiAgfSkpO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbi8qKioqKioqKioqKioqL1xuLyogbGlzdGVuZXJzICovXG4vKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gaW5pdExpc3RlbmVycygpOiB2b2lkIHtcbiAgYWRkR3JhZGVib29rTGlzdGVuZXJzKCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdyYWRlYm9va0xpc3RlbmVycygpOiB2b2lkIHtcbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJncmFkZWJvb2stYnV0dG9uXCIpXS5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcImNsaWNrXCIsXG4gICAgICBhc3luYyAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IGF3YWl0IHJlcXVlc3RHcmFkZWJvb2soZXZlbnQpLFxuICAgICk7XG4gIH0pO1xufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHVybHM6IHtcbiAgcmVxdWVzdEdyYWRlYm9vazogc3RyaW5nLFxuICBncmFkZWJvb2tSZXN1bHQ6IHN0cmluZyxcbiAgcmVtb3ZlRmFpbGVkR3JhZGVib29rOiBzdHJpbmcsXG4gIGRvd25sb2FkR3JhZGVib29rOiBzdHJpbmcsXG4gIHRhc2tzOiBzdHJpbmcsXG59KTogdm9pZCB7XG4gIGluaXRNb2RlbCh1cmxzKTtcbiAgdXBkYXRlKCk7XG4gIGluaXRMaXN0ZW5lcnMoKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBidWlsZFJlcSB9IGZyb20gXCIuLi8uLi9hamF4LmpzXCI7XG5pbXBvcnQgeyBjbGVhciB9IGZyb20gXCIuLi8uLi91dGlscy5qc1wiO1xuXG4vKioqKioqKioqL1xuLyogbW9kZWwgKi9cbi8qKioqKioqKiovXG5cbnR5cGUgVGhyZWFkID0ge1xuICBpZDogbnVtYmVyLFxuICB0aXRsZTogc3RyaW5nLFxuICBsYXN0UmVwbHk6IHtcbiAgICBhdXRob3I6IHN0cmluZyxcbiAgICBjb250ZW50OiBzdHJpbmcsXG4gIH0sXG4gIG5OZXc6IG51bWJlcixcbiAgbGluazogc3RyaW5nLFxufTtcblxudHlwZSBNZXNzYWdlID0gVGhyZWFkO1xuXG5sZXQgbW9kZWw6IHtcbiAgb3BlbjogYm9vbGVhbixcbiAgbWVzc2FnZXM6IEFycmF5PE1lc3NhZ2U+LFxuICB1cmxzOiB7XG4gICAgbWFya1JlYWRVcmw6IHN0cmluZyxcbiAgICBtZXNzYWdlc1VybDogc3RyaW5nLFxuICB9LFxufTtcblxuZnVuY3Rpb24gaW5pdE1vZGVsKHVybHM6IHsgbWFya1JlYWRVcmw6IHN0cmluZywgbWVzc2FnZXNVcmw6IHN0cmluZyB9KTogdm9pZCB7XG4gIG1vZGVsID0ge1xuICAgIG9wZW46IGZhbHNlLFxuICAgIG1lc3NhZ2VzOiBbXSxcbiAgICB1cmxzOiB1cmxzLFxuICB9O1xufVxuXG4vKioqKioqKioqKi9cbi8qIHVwZGF0ZSAqL1xuLyoqKioqKioqKiovXG5cbmZ1bmN0aW9uIHVwZGF0ZSgpOiB2b2lkIHtcbiAgZ2V0TWVzc2FnZXMoKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlTWVzc2FnZXMoKTogdm9pZCB7XG4gIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZXNcIik7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaGVhZGVyLS10b2dnbGFibGUgPiAqXCIpLmZvckVhY2goaGVhZGVyXyA9PiB7XG4gICAgaWYgKGhlYWRlcl8gIT0gaGVhZGVyICYmIGhlYWRlcl8uaGFzQXR0cmlidXRlKFwib3BlblwiKSkge1xuICAgICAgaWYgKGhlYWRlcl8uc2hhZG93Um9vdCkge1xuICAgICAgICBoZWFkZXJfLnNoYWRvd1Jvb3RcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX2ljb25cIilcbiAgICAgICAgICAuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJjbGlja1wiKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWFkZXJfXG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19pY29uXCIpXG4gICAgICAgICAgLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiY2xpY2tcIikpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG1vZGVsLm9wZW4gPSAhbW9kZWwub3BlbjtcbiAgbWVzc2FnZXNWaWV3KCk7XG59XG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2VzKCk6IHZvaWQge1xuICBjb25zdCB1cmwgPSBtb2RlbC51cmxzLm1lc3NhZ2VzVXJsO1xuICBjb25zdCByZXEgPSBidWlsZFJlcSh7fSwgXCJnZXRcIik7XG5cbiAgZmV0Y2godXJsLCByZXEpXG4gICAgLnRoZW4ocmVzcCA9PiByZXNwLmpzb24oKSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgIG1vZGVsLm1lc3NhZ2VzID0gZGF0YS50aHJlYWRzLm1hcChtZXNzYWdlID0+ICh7XG4gICAgICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgICAgICB0aXRsZTogbWVzc2FnZS50aXRsZSxcbiAgICAgICAgbGFzdFJlcGx5OiB7XG4gICAgICAgICAgYXV0aG9yOiBtZXNzYWdlLmxhc3RfcmVwbHkuYXV0aG9yLFxuICAgICAgICAgIGNvbnRlbnQ6IG1lc3NhZ2UubGFzdF9yZXBseS5jb250ZW50LFxuICAgICAgICAgIGRhdGU6IG1lc3NhZ2UubGFzdF9yZXBseS5kYXRlLFxuICAgICAgICB9LFxuICAgICAgICBuTmV3OiBtZXNzYWdlLm5fbmV3LFxuICAgICAgICBsaW5rOiBtZXNzYWdlLmxpbmssXG4gICAgICB9KSk7XG4gICAgICBtZXNzYWdlc1ZpZXcoKTtcbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFya0FsbFJlYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHt9LCBcInBvc3RcIik7XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChtb2RlbC51cmxzLm1hcmtSZWFkVXJsLCByZXEpO1xuICBpZiAocmVzcC5vaykge1xuICAgIG1vZGVsLm1lc3NhZ2VzLmZvckVhY2gobWVzc2FnZSA9PiB7XG4gICAgICBtZXNzYWdlLm5OZXcgPSAwO1xuICAgIH0pO1xuICB9XG4gIG1lc3NhZ2VzVmlldygpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtYXJrUmVhZChcbiAgZXZlbnQ6IE1vdXNlRXZlbnQsXG4gIG1lc3NhZ2U6IE1lc3NhZ2UsXG4gIGRpdjogSFRNTERpdkVsZW1lbnQsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHsgaWQ6IG1lc3NhZ2UuaWQgfSwgXCJwb3N0XCIpO1xuICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2gobW9kZWwudXJscy5tYXJrUmVhZFVybCwgcmVxKTtcbiAgaWYgKHJlc3Aub2spIHtcbiAgICBtZXNzYWdlLm5OZXcgPSAwO1xuICB9XG4gIG1lc3NhZ2VWaWV3KG1lc3NhZ2UsIGRpdik7XG4gIGJhZGdlVmlldygpO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbmZ1bmN0aW9uIHZpZXcoKTogdm9pZCB7XG4gIG1lc3NhZ2VzVmlldygpO1xufVxuXG5mdW5jdGlvbiBtZXNzYWdlc1ZpZXcoKTogdm9pZCB7XG4gIGNvbnN0IG1lc3NhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZXNzYWdlc1wiKTtcbiAgY29uc3QgYmFkZ2UgPSBtZXNzYWdlcz8ucXVlcnlTZWxlY3RvcihcIi5tZXNzYWdlc19faWNvbl9fYmFkZ2VcIik7XG4gIGNvbnN0IG1lc3NhZ2VzTGlzdCA9IG1lc3NhZ2VzPy5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VzX19tZXNzYWdlc1wiKTtcblxuICBpZiAoIW1lc3NhZ2VzIHx8ICFiYWRnZSB8fCAhbWVzc2FnZXNMaXN0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYmFkZ2VWaWV3KCk7XG5cbiAgY2xlYXIobWVzc2FnZXNMaXN0KTtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VzX19yZWFkLWFsbC1idG5cIikuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcblxuICBjb25zdCBuTmV3ID0gbW9kZWwubWVzc2FnZXMuZmlsdGVyKG1lc3NhZ2UgPT4gbWVzc2FnZS5uTmV3ID4gMCkubGVuZ3RoO1xuICBpZiAobk5ldykge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5tZXNzYWdlc19fcmVhZC1hbGwtYnRuXCIpXG4gICAgICAuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfVxuXG4gIGlmIChtb2RlbC5tZXNzYWdlcy5sZW5ndGgpIHtcbiAgICBtb2RlbC5tZXNzYWdlcy5tYXAoZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgbWVzc2FnZXNMaXN0LmFwcGVuZENoaWxkKG1lc3NhZ2VWaWV3KG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlc0xpc3QuYXBwZW5kQ2hpbGQobm9NZXNzYWdlVmlldygpKTtcbiAgfVxuXG4gIGlmIChtb2RlbC5vcGVuKSB7XG4gICAgbWVzc2FnZXMuc2V0QXR0cmlidXRlKFwib3BlblwiLCBcIlwiKTtcbiAgICBtZXNzYWdlcy5jbGFzc0xpc3QuYWRkKFwibWVzc2FnZXMtLW9wZW5cIik7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZXMucmVtb3ZlQXR0cmlidXRlKFwib3BlblwiKTtcbiAgICBtZXNzYWdlcy5jbGFzc0xpc3QucmVtb3ZlKFwibWVzc2FnZXMtLW9wZW5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFkZ2VWaWV3KCk6IHZvaWQge1xuICBjb25zdCBiYWRnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZXNfX2ljb25fX2JhZGdlXCIpO1xuXG4gIGNvbnN0IG5OZXcgPSBtb2RlbC5tZXNzYWdlcy5maWx0ZXIobWVzc2FnZSA9PiBtZXNzYWdlLm5OZXcgPiAwKS5sZW5ndGg7XG4gIGlmIChuTmV3KSB7XG4gICAgYmFkZ2UudGV4dENvbnRlbnQgPSBuTmV3LnRvU3RyaW5nKCk7XG4gICAgYmFkZ2Uuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICB9IGVsc2Uge1xuICAgIGJhZGdlLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBiYWRnZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVzc2FnZVZpZXcoXG4gIG1lc3NhZ2U6IE1lc3NhZ2UsXG4gIGRpdjogP0hUTUxEaXZFbGVtZW50ID0gbnVsbCxcbik6IEhUTUxEaXZFbGVtZW50IHtcbiAgaWYgKGRpdikge1xuICAgIGNsZWFyKGRpdik7XG4gIH0gZWxzZSB7XG4gICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2VcIik7XG4gICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1lc3NhZ2UubGluaztcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdGl0bGUuY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2VfX3RpdGxlXCIpO1xuICB0aXRsZS50ZXh0Q29udGVudCA9IG1lc3NhZ2UudGl0bGU7XG4gIGRpdi5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgaWYgKG1lc3NhZ2Uubk5ldykge1xuICAgIGRpdi5jbGFzc0xpc3QuYWRkKFwibWVzc2FnZS0tbmV3XCIpO1xuICB9IGVsc2Uge1xuICAgIGRpdi5jbGFzc0xpc3QucmVtb3ZlKFwibWVzc2FnZS0tbmV3XCIpO1xuICB9XG5cbiAgaWYgKG1lc3NhZ2Uubk5ldykge1xuICAgIGNvbnN0IG5ld18gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG5ld18uY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2VfX25ld1wiKTtcbiAgICBuZXdfLnRleHRDb250ZW50ID0gXCJOZXchXCI7XG4gICAgZGl2LmFwcGVuZENoaWxkKG5ld18pO1xuICB9XG5cbiAgaWYgKG1lc3NhZ2UubGFzdFJlcGx5LmF1dGhvcikge1xuICAgIGNvbnN0IGxhc3RSZXBseSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbGFzdFJlcGx5LmNsYXNzTGlzdC5hZGQoXCJtZXNzYWdlX19sYXN0LXJlcGx5XCIpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChsYXN0UmVwbHkpO1xuXG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGNvbnRlbnQuY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2VfX2xhc3QtcmVwbHlfX2NvbnRlbnRcIik7XG4gICAgY29udGVudC50ZXh0Q29udGVudCA9IG1lc3NhZ2UubGFzdFJlcGx5LmNvbnRlbnQ7XG4gICAgbGFzdFJlcGx5LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgY29uc3QgYXV0aG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBhdXRob3IuY2xhc3NMaXN0LmFkZChcIm1lc3NhZ2VfX2xhc3QtcmVwbHlfX2F1dGhvclwiKTtcbiAgICBhdXRob3IuaW5uZXJIVE1MID1cbiAgICAgIG1lc3NhZ2UubGFzdFJlcGx5LmF1dGhvciArIFwiICZtaWRkb3Q7IFwiICsgbWVzc2FnZS5sYXN0UmVwbHkuZGF0ZTtcblxuICAgIGlmIChtZXNzYWdlLm5OZXcpIHtcbiAgICAgIGNvbnN0IG1hcmtSZWFkQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBtYXJrUmVhZEJ0bi5jbGFzc0xpc3QuYWRkKFwibWVzc2FnZV9fbWFyay1yZWFkXCIpO1xuICAgICAgbWFya1JlYWRCdG4udGV4dENvbnRlbnQgPSBcImNsZWFyXCI7XG4gICAgICBtYXJrUmVhZEJ0bi50aXRsZSA9IFwiTWFyayByZWFkXCI7XG4gICAgICBtYXJrUmVhZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PlxuICAgICAgICBtYXJrUmVhZChldmVudCwgbWVzc2FnZSwgZGl2KSxcbiAgICAgICk7XG4gICAgICBhdXRob3IuYXBwZW5kQ2hpbGQobWFya1JlYWRCdG4pO1xuICAgIH1cblxuICAgIGxhc3RSZXBseS5hcHBlbmRDaGlsZChhdXRob3IpO1xuICB9XG5cbiAgcmV0dXJuIGRpdjtcbn1cblxuZnVuY3Rpb24gbm9NZXNzYWdlVmlldygpOiBIVE1MRGl2RWxlbWVudCB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdi50ZXh0Q29udGVudCA9IFwiTm8gbWVzc2FnZXNcIjtcbiAgcmV0dXJuIGRpdjtcbn1cblxuLyoqKioqKioqKioqKiovXG4vKiBsaXN0ZW5lcnMgKi9cbi8qKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gIGFkZE1lc3NhZ2VzT3Blbkxpc3RlbmVyKCk7XG4gIGFkZE1hcmtBbGxSZWFkTGlzdGVuZXIoKTtcbn1cblxuZnVuY3Rpb24gYWRkTWVzc2FnZXNPcGVuTGlzdGVuZXIoKTogdm9pZCB7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZXNcIilcbiAgICA/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZXNfX2ljb25cIilcbiAgICA/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgdG9nZ2xlTWVzc2FnZXMoKTtcbiAgICB9KTtcbiAgZG9jdW1lbnQuYm9keT8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKG1vZGVsLm9wZW4pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdG9nZ2xlTWVzc2FnZXMoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRNYXJrQWxsUmVhZExpc3RlbmVyKCk6IHZvaWQge1xuICBkb2N1bWVudFxuICAgIC5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VzX19yZWFkLWFsbC1idG5cIilcbiAgICA/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBtYXJrQWxsUmVhZCgpKTtcbn1cblxuLyoqKioqKioqL1xuLyogaW5pdCAqL1xuLyoqKioqKioqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdCh1cmxzOiB7XG4gIG1hcmtSZWFkVXJsOiBzdHJpbmcsXG4gIG1lc3NhZ2VzVXJsOiBzdHJpbmcsXG59KTogdm9pZCB7XG4gIGluaXRNb2RlbCh1cmxzKTtcbiAgdXBkYXRlKCk7XG4gIHZpZXcoKTtcbiAgaW5pdEV2ZW50TGlzdGVuZXJzKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGJ1aWxkUmVxIH0gZnJvbSBcIi4uLy4uL2FqYXguanNcIjtcbmltcG9ydCB7IGNsZWFyIH0gZnJvbSBcIi4uLy4uL3V0aWxzLmpzXCI7XG5cbi8qKioqKioqKiovXG4vKiBtb2RlbCAqL1xuLyoqKioqKioqKi9cblxubGV0IG1vZGVsO1xuXG5mdW5jdGlvbiBpbml0TW9kZWwoXG4gIGZsYWdRdWVzdGlvblVybCxcbiAgZ2V0RmxhZ1F1ZXN0aW9uUmVhc29uc1VybCxcbiAgZ2V0TmV3UXVlc3Rpb25VcmwsXG4gIHRvZ2dsZUZhdm91cml0ZVVybCxcbikge1xuICBtb2RlbCA9IHtcbiAgICBmbGFnUXVlc3Rpb25SZWFzb25zOiBbXSxcbiAgICB1cmxzOiB7XG4gICAgICBmbGFnUXVlc3Rpb246IGZsYWdRdWVzdGlvblVybCxcbiAgICAgIGdldEZsYWdRdWVzdGlvblJlYXNvbnM6IGdldEZsYWdRdWVzdGlvblJlYXNvbnNVcmwsXG4gICAgICBnZXROZXdRdWVzdGlvbjogZ2V0TmV3UXVlc3Rpb25VcmwsXG4gICAgICB0b2dnbGVGYXZvdXJpdGU6IHRvZ2dsZUZhdm91cml0ZVVybCxcbiAgICB9LFxuICB9O1xufVxuXG5jb25zdCB0cmFuc2l0aW9uID0ge1xuICBkdXJhdGlvbjogNjAwLFxuICBkaXJlY3Rpb246IFwicmlnaHRcIixcbiAgZWFzaW5nOiBcImVhc2VJbk91dEN1YmljXCIsXG59O1xuXG4vKioqKioqKioqKi9cbi8qIHVwZGF0ZSAqL1xuLyoqKioqKioqKiovXG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgYXdhaXQgZ2V0RmxhZ1F1ZXN0aW9uUmVhc29ucygpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pIHtcbiAgY29uc3Qgb3BlbiA9IHF1ZXN0aW9uLmdldEF0dHJpYnV0ZShcIm9wZW5cIik7XG4gIGNvbnN0IGlkID0gcXVlc3Rpb24uZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKTtcbiAgY29uc3QgZm9ybSA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fZm9ybVwiKTtcbiAgY29uc3QgaWNvbiA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fYnRuXCIpO1xuXG4gIGlmIChpZCA9PT0gbnVsbCkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJUaGUgZmxhZyBxdWVzdGlvbiBkaXYgbmVlZHMgYSBgZGF0YS1pZGAgYXR0cmlidXRlIHJlcHJlc2VudGluZyB0aGUgXCIgK1xuICAgICAgICBcInF1ZXN0aW9uIHBrLlwiLFxuICAgICk7XG4gIH1cblxuICBpZiAob3BlbiA9PT0gbnVsbCkge1xuICAgIHF1ZXN0aW9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJcIik7XG4gICAgZm9ybS5yZW1vdmVBdHRyaWJ1dGUoXCJoaWRkZW5cIik7XG4gICAgaWNvbi50ZXh0Q29udGVudCA9IFwiZmxhZ1wiO1xuICB9IGVsc2Uge1xuICAgIHF1ZXN0aW9uLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJcIik7XG4gICAgaWNvbi50ZXh0Q29udGVudCA9IFwib3V0bGluZWRfZmxhZ1wiO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEZsYWdRdWVzdGlvblJlYXNvbnMoKSB7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHt9LCBcImdldFwiKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZ2V0RmxhZ1F1ZXN0aW9uUmVhc29ucywgcmVxKTtcbiAgaWYgKCFyZXNwLm9rKSB7XG4gICAgY29uc29sZS5sb2cocmVzcCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3AuanNvbigpO1xuICBtb2RlbC5mbGFnUXVlc3Rpb25SZWFzb25zID0gZGF0YS5yZWFzb25zO1xuICBmbGFnUXVlc3Rpb25WaWV3KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZsYWdRdWVzdGlvbihxdWVzdGlvbikge1xuICBjb25zdCBpZCA9IHF1ZXN0aW9uLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIik7XG4gIGNvbnN0IHNlbGVjdCA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fZm9ybV9fc2VsZWN0XCIpO1xuICBjb25zdCByZWFzb24gPSBzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0udmFsdWU7XG5cbiAgY29uc3QgZGF0YSA9IHtcbiAgICBpZDogaWQsXG4gICAgcmVhc29uOiByZWFzb24sXG4gIH07XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKGRhdGEsIFwicG9zdFwiKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZmxhZ1F1ZXN0aW9uLCByZXEpO1xuICBpZiAoIXJlc3Aub2spIHtcbiAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgfVxuICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICBhd2FpdCBnZXROZXdRdWVzdGlvbihxdWVzdGlvbi5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE5ld1F1ZXN0aW9uKHF1ZXN0aW9uKSB7XG4gIGNvbnN0IHBvc3RpbmcgPSAkLmdldChtb2RlbC51cmxzLmdldE5ld1F1ZXN0aW9uKTtcbiAgcG9zdGluZy5kb25lKGRhdGEgPT4ge1xuICAgICQocXVlc3Rpb24pLnRvZ2dsZShcImZhZGVcIiwgKCkgPT4ge1xuICAgICAgJChxdWVzdGlvbikucmVtb3ZlKCk7XG4gICAgICAkKFwiI3F1ZXN0aW9uc1wiKS5hcHBlbmQoZGF0YSk7XG4gICAgICAkKFwiI3F1ZXN0aW9ucyAubWRjLWNhcmRcIilcbiAgICAgICAgLmhpZGUoKVxuICAgICAgICAudG9nZ2xlKFwic2xpZGVcIiwgdHJhbnNpdGlvbik7XG4gICAgICBpbml0TmV3Q2FyZChtb2RlbC51cmxzLnRvZ2dsZUZhdm91cml0ZSwgbW9kZWwudXJscy5nZXROZXdRdWVzdGlvbik7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiI3F1ZXN0aW9uc1wiO1xuICAgIH0pO1xuICB9KTtcbiAgcG9zdGluZy5mYWlsKCgpID0+IHtcbiAgICB4LmlubmVySFRNTCA9IFwiZXJyb3JcIjsgLy8gQWRkIHNuYWNrIGJhcj9cbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB4LmlubmVySFRNTCA9IFwiYXV0b3JlbmV3XCI7XG4gICAgfSwgNTAwMCk7XG4gIH0pO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbmZ1bmN0aW9uIHZpZXcoKSB7XG4gIGZsYWdRdWVzdGlvblZpZXcoKTtcbn1cblxuZnVuY3Rpb24gZmxhZ1F1ZXN0aW9uVmlldygpIHtcbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJmbGFnLXF1ZXN0aW9uXCIpXS5mb3JFYWNoKHF1ZXN0aW9uID0+IHtcbiAgICBjb25zdCBzZWxlY3QgPSBxdWVzdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmZsYWctcXVlc3Rpb25fX2Zvcm0gc2VsZWN0XCIpO1xuICAgIGNsZWFyKHNlbGVjdCk7XG4gICAgbW9kZWwuZmxhZ1F1ZXN0aW9uUmVhc29ucy5mb3JFYWNoKHJlYXNvbiA9PiB7XG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgb3B0aW9uLmNsYXNzTGlzdC5hZGQoXCJmbGFnLXF1ZXN0aW9uX19mb3JtX19vcHRpb25cIik7XG4gICAgICBvcHRpb24udmFsdWUgPSByZWFzb247XG4gICAgICBvcHRpb24udGV4dENvbnRlbnQgPSByZWFzb247XG4gICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKioqKioqKioqKioqL1xuLyogbGlzdGVuZXJzICovXG4vKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gYWRkRmxhZ1F1ZXN0aW9uTGlzdGVuZXJzKCkge1xuICBbLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZsYWctcXVlc3Rpb25cIildLmZvckVhY2gocXVlc3Rpb24gPT4ge1xuICAgIHF1ZXN0aW9uXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5mbGFnLXF1ZXN0aW9uX19jbG9zZVwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfSk7XG4gICAgcXVlc3Rpb25cbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZsYWctcXVlc3Rpb25fX2J0blwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfSk7XG4gICAgcXVlc3Rpb25cbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZsYWctcXVlc3Rpb25fX2Zvcm1cIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0pO1xuICAgIHF1ZXN0aW9uXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5mbGFnLXF1ZXN0aW9uX19mb3JtXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGZsYWdRdWVzdGlvbihxdWVzdGlvbik7XG4gICAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAocXVlc3Rpb24uaGFzQXR0cmlidXRlKFwib3BlblwiKSkge1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqKioqKioqL1xuLyogaW5pdCAqL1xuLyoqKioqKioqL1xuXG5mdW5jdGlvbiBpbml0TmV3Q2FyZChmYXZVcmwsIHJlZnJlc2hVcmwpIHtcbiAgJChcIiNxdWVzdGlvbnMgLm1kYy1jYXJkXCIpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZShcImluaXRpYWxpemVkXCIpICE9PSBcInRydWVcIikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwiaW5pdGlhbGl6ZWRcIiwgXCJ0cnVlXCIpO1xuXG4gICAgICAkKGVsKVxuICAgICAgICAuZmluZChcIi5tZGMtaWNvbi10b2dnbGUuZmF2b3VyaXRlLWJ0blwiKVxuICAgICAgICAuZWFjaCgoaSwgaGVhcnQpID0+IHtcbiAgICAgICAgICBidW5kbGUuaWNvblRvZ2dsZS5NRENJY29uVG9nZ2xlLmF0dGFjaFRvKGhlYXJ0KTtcbiAgICAgICAgICBoZWFydC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9zdGluZyA9ICQucG9zdChmYXZVcmwsIHtcbiAgICAgICAgICAgICAgcGs6IGhlYXJ0LmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvc3RpbmcuZG9uZShkYXRhID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICQoZWwpXG4gICAgICAgIC5maW5kKFwiLnJlbW92ZS1idG5cIilcbiAgICAgICAgLmVhY2goKGksIHgpID0+IHtcbiAgICAgICAgICB4LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwb3N0aW5nID0gJC5nZXQocmVmcmVzaFVybCk7XG4gICAgICAgICAgICBwb3N0aW5nLmRvbmUoZGF0YSA9PiB7XG4gICAgICAgICAgICAgICQoZWwpLnRvZ2dsZShcImZhZGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICQoZWwpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICQoXCIjcXVlc3Rpb25zXCIpLmFwcGVuZChkYXRhKTtcbiAgICAgICAgICAgICAgICAkKFwiI3F1ZXN0aW9ucyAubWRjLWNhcmRcIilcbiAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgIC50b2dnbGUoXCJzbGlkZVwiLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpbml0TmV3Q2FyZChmYXZVcmwsIHJlZnJlc2hVcmwpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCIjcXVlc3Rpb25zXCI7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb3N0aW5nLmZhaWwoKCkgPT4ge1xuICAgICAgICAgICAgICB4LmlubmVySFRNTCA9IFwiZXJyb3JcIjsgLy8gQWRkIHNuYWNrIGJhcj9cbiAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHguaW5uZXJIVE1MID0gXCJhdXRvcmVuZXdcIjtcbiAgICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgYWRkRmxhZ1F1ZXN0aW9uTGlzdGVuZXJzKCk7XG4gIHZpZXcoKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXQoXG4gIGZhdlVybCxcbiAgcmVmcmVzaFVybCxcbiAgZ2V0RmxhZ1F1ZXN0aW9uUmVhc29uc1VybCxcbiAgZmxhZ1F1ZXN0aW9uVXJsLFxuKSB7XG4gIGluaXRNb2RlbChmbGFnUXVlc3Rpb25VcmwsIGdldEZsYWdRdWVzdGlvblJlYXNvbnNVcmwsIHJlZnJlc2hVcmwsIGZhdlVybCk7XG4gIGluaXROZXdDYXJkKGZhdlVybCwgcmVmcmVzaFVybCk7XG4gIHVwZGF0ZSgpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGRhdGEpIHtcbiAgZnVuY3Rpb24gZHJhdygpIHtcbiAgICAkKFwiLnByb2dyZXNzLWNoYXJ0XCIpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICBjb25zdCBkYXRhc2V0ID1cbiAgICAgICAgZGF0YVtlbC5nZXRBdHRyaWJ1dGUoXCJncm91cFwiKV1bZWwuZ2V0QXR0cmlidXRlKFwiYXNzaWdubWVudFwiKV07XG4gICAgICBidW5kbGUucGxvdFRpbWVTZXJpZXMoZWwsIGRhdGFzZXQpO1xuICAgIH0pO1xuICB9XG4gIGRyYXcoKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZHJhdyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdHJhbnNpdGlvbiA9IHtcbiAgZHVyYXRpb246IDYwMCxcbiAgZGlyZWN0aW9uOiBcInJpZ2h0XCIsXG4gIGVhc2luZzogXCJlYXNlSW5PdXRDdWJpY1wiLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQodXJsKSB7XG4gIC8vIFJhdGluZyBzeXN0ZW1cbiAgJChcIiNyYXRpb25hbGVzIC5tZGMtY2FyZFwiKS5lYWNoKChpLCBlbCkgPT4ge1xuICAgIGNvbnN0IGlkID0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKTtcbiAgICBsZXQgc2NvcmU7XG5cbiAgICAvLyBTY29yZVxuICAgICQoZWwpXG4gICAgICAuZmluZChcIi5zdGFyXCIpXG4gICAgICAuZWFjaCgoaSwgc3RhcikgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgaG92ZXJcbiAgICAgICAgc3Rhci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcbiAgICAgICAgICBzY29yZSA9IHN0YXIuZ2V0QXR0cmlidXRlKFwiZGF0YS1yYW5rXCIpO1xuICAgICAgICAgICQoXCIuc3RhclwiKS5lYWNoKChpLCBfc3RhcikgPT4ge1xuICAgICAgICAgICAgaWYgKF9zdGFyLmdldEF0dHJpYnV0ZShcImRhdGEtcmFua1wiKSA8PSBzY29yZSkge1xuICAgICAgICAgICAgICBfc3Rhci5pbm5lckhUTUwgPSBcInN0YXJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9zdGFyLmlubmVySFRNTCA9IFwic3Rhcl9ib3JkZXJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcbiAgICAgICAgICAkKFwiLnN0YXJcIikuZWFjaCgoaSwgX3N0YXIpID0+IHtcbiAgICAgICAgICAgIF9zdGFyLmlubmVySFRNTCA9IFwic3Rhcl9ib3JkZXJcIjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU3VibWl0IHNjb3JlXG4gICAgICAgICQoc3Rhcikub25lKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBvc3RpbmcgPSAkLnBvc3QodXJsLCB7IGlkOiBpZCwgc2NvcmU6IHNjb3JlIH0pO1xuICAgICAgICAgIHBvc3RpbmcuZG9uZShkYXRhID0+IHtcbiAgICAgICAgICAgIHByb2Nlc3NSZXNwb25zZShkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIC8vIEZsYWcgaW5hcHByb3ByaWF0ZVxuICAgICQoZWwpXG4gICAgICAuZmluZChcIi5mbGFnXCIpXG4gICAgICAuZWFjaCgoaSwgZmxhZykgPT4ge1xuICAgICAgICBmbGFnLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICQoXCIuZmxhZ1wiKS5lYWNoKChpLCBfZmxhZykgPT4ge1xuICAgICAgICAgICAgX2ZsYWcuaW5uZXJIVE1MID0gXCJmbGFnXCI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBmbGFnLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoKSA9PiB7XG4gICAgICAgICAgJChcIi5mbGFnXCIpLmVhY2goKGksIF9mbGFnKSA9PiB7XG4gICAgICAgICAgICBfZmxhZy5pbm5lckhUTUwgPSBcIm91dGxpbmVkX2ZsYWdcIjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoZmxhZykub25lKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBvc3RpbmcgPSAkLnBvc3QodXJsLCB7IGlkOiBpZCwgc2NvcmU6IDAgfSk7XG4gICAgICAgICAgcG9zdGluZy5kb25lKGRhdGEgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzc1Jlc3BvbnNlKGRhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Jlc3BvbnNlKGRhdGEpIHtcbiAgICAgICQoZWwpLnRvZ2dsZShcImZhZGVcIiwgKCkgPT4ge1xuICAgICAgICAkKGVsKS5yZW1vdmUoKTtcbiAgICAgICAgJChcIiNyYXRpb25hbGVzXCIpLmFwcGVuZChkYXRhKTtcbiAgICAgICAgJChcIiNyYXRpb25hbGVzIC5tZGMtY2FyZFwiKVxuICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAudG9nZ2xlKFwic2xpZGVcIiwgdHJhbnNpdGlvbik7XG4gICAgICAgIGluaXQodXJsKTtcbiAgICAgICAgLy8gUmVmcmVzaCByZXB1dGF0aW9uIHNjb3JlXG4gICAgICAgIGRvY3VtZW50XG4gICAgICAgICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGVhY2hlci1yZXB1dGF0aW9uLWhlYWRlclwiKVswXVxuICAgICAgICAgIC5zZXRBdHRyaWJ1dGUoXCJzdGFsZVwiLCBcIlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGJ1aWxkUmVxIH0gZnJvbSBcIi4uL2FqYXguanNcIjtcbmltcG9ydCB7IGNsZWFyIH0gZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbi8qKioqKioqKiovXG4vKiBtb2RlbCAqL1xuLyoqKioqKioqKi9cblxubGV0IG1vZGVsO1xuXG5mdW5jdGlvbiBpbml0TW9kZWwoXG4gIGZsYWdRdWVzdGlvblVybCxcbiAgZ2V0RmxhZ1F1ZXN0aW9uUmVhc29uc1VybCxcbikge1xuICBtb2RlbCA9IHtcbiAgICBmbGFnUXVlc3Rpb25SZWFzb25zOiBbXSxcbiAgICB1cmxzOiB7XG4gICAgICBmbGFnUXVlc3Rpb246IGZsYWdRdWVzdGlvblVybCxcbiAgICAgIGdldEZsYWdRdWVzdGlvblJlYXNvbnM6IGdldEZsYWdRdWVzdGlvblJlYXNvbnNVcmwsXG4gICAgfSxcbiAgfTtcbiAgZ2V0RmxhZ1F1ZXN0aW9uUmVhc29ucygpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pIHtcbiAgY29uc3Qgb3BlbiA9IHF1ZXN0aW9uLmdldEF0dHJpYnV0ZShcIm9wZW5cIik7XG4gIGNvbnN0IGlkID0gcXVlc3Rpb24uZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKTtcbiAgY29uc3QgZm9ybSA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fZm9ybVwiKTtcbiAgY29uc3QgaWNvbiA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fYnRuXCIpO1xuXG4gIGlmIChpZCA9PT0gbnVsbCkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJUaGUgZmxhZyBxdWVzdGlvbiBkaXYgbmVlZHMgYSBgZGF0YS1pZGAgYXR0cmlidXRlIHJlcHJlc2VudGluZyB0aGUgXCIgK1xuICAgICAgICBcInF1ZXN0aW9uIHBrLlwiLFxuICAgICk7XG4gIH1cblxuICBpZiAob3BlbiA9PT0gbnVsbCkge1xuICAgIHF1ZXN0aW9uLnNldEF0dHJpYnV0ZShcIm9wZW5cIiwgXCJcIik7XG4gICAgZm9ybS5yZW1vdmVBdHRyaWJ1dGUoXCJoaWRkZW5cIik7XG4gICAgaWNvbi50ZXh0Q29udGVudCA9IFwiZmxhZ1wiO1xuICB9IGVsc2Uge1xuICAgIHF1ZXN0aW9uLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJcIik7XG4gICAgaWNvbi50ZXh0Q29udGVudCA9IFwib3V0bGluZWRfZmxhZ1wiO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEZsYWdRdWVzdGlvblJlYXNvbnMoKSB7XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKHt9LCBcImdldFwiKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZ2V0RmxhZ1F1ZXN0aW9uUmVhc29ucywgcmVxKTtcbiAgaWYgKCFyZXNwLm9rKSB7XG4gICAgY29uc29sZS5sb2cocmVzcCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3AuanNvbigpO1xuICBtb2RlbC5mbGFnUXVlc3Rpb25SZWFzb25zID0gZGF0YS5yZWFzb25zO1xuICBmbGFnUXVlc3Rpb25WaWV3KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZsYWdRdWVzdGlvbihxdWVzdGlvbikge1xuICBjb25zdCBpZCA9IHF1ZXN0aW9uLmdldEF0dHJpYnV0ZShcImRhdGEtaWRcIik7XG4gIGNvbnN0IHNlbGVjdCA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fZm9ybV9fc2VsZWN0XCIpO1xuICBjb25zdCByZWFzb24gPSBzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0udmFsdWU7XG5cbiAgY29uc3QgZGF0YSA9IHtcbiAgICBpZDogaWQsXG4gICAgcmVhc29uOiByZWFzb24sXG4gIH07XG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKGRhdGEsIFwicG9zdFwiKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG1vZGVsLnVybHMuZmxhZ1F1ZXN0aW9uLCByZXEpO1xuICBpZiAoIXJlc3Aub2spIHtcbiAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgfVxuICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xufVxuXG5mdW5jdGlvbiBmbGFnUXVlc3Rpb25WaWV3KCkge1xuICBbLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZsYWctcXVlc3Rpb25cIildLmZvckVhY2gocXVlc3Rpb24gPT4ge1xuICAgIGNvbnN0IHNlbGVjdCA9IHF1ZXN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuZmxhZy1xdWVzdGlvbl9fZm9ybSBzZWxlY3RcIik7XG4gICAgY2xlYXIoc2VsZWN0KTtcbiAgICBtb2RlbC5mbGFnUXVlc3Rpb25SZWFzb25zLmZvckVhY2gocmVhc29uID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICBvcHRpb24uY2xhc3NMaXN0LmFkZChcImZsYWctcXVlc3Rpb25fX2Zvcm1fX29wdGlvblwiKTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IHJlYXNvbjtcbiAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHJlYXNvbjtcbiAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkRmxhZ1F1ZXN0aW9uTGlzdGVuZXJzKCkge1xuICBbLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImZsYWctcXVlc3Rpb25cIildLmZvckVhY2gocXVlc3Rpb24gPT4ge1xuICAgIHF1ZXN0aW9uXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5mbGFnLXF1ZXN0aW9uX19jbG9zZVwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfSk7XG4gICAgcXVlc3Rpb25cbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZsYWctcXVlc3Rpb25fX2J0blwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfSk7XG4gICAgcXVlc3Rpb25cbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZsYWctcXVlc3Rpb25fX2Zvcm1cIilcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0pO1xuICAgIHF1ZXN0aW9uXG4gICAgICAucXVlcnlTZWxlY3RvcihcIi5mbGFnLXF1ZXN0aW9uX19mb3JtXCIpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGZsYWdRdWVzdGlvbihxdWVzdGlvbik7XG4gICAgICB9KTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAocXVlc3Rpb24uaGFzQXR0cmlidXRlKFwib3BlblwiKSkge1xuICAgICAgICB0b2dnbGVGbGFnUXVlc3Rpb24ocXVlc3Rpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXQoXG4gIGdldEZsYWdRdWVzdGlvblJlYXNvbnNVcmwsXG4gIGZsYWdRdWVzdGlvblVybCxcbikge1xuICBhd2FpdCBpbml0TW9kZWwoZmxhZ1F1ZXN0aW9uVXJsLCBnZXRGbGFnUXVlc3Rpb25SZWFzb25zVXJsKTtcbiAgYWRkRmxhZ1F1ZXN0aW9uTGlzdGVuZXJzKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IHsgaW5pdCBhcyBpbml0RGFzaGJvYXJkIH0gZnJvbSBcIi4vX3RlYWNoZXIvZGFzaGJvYXJkLmpzXCI7XG5leHBvcnQgeyBpbml0IGFzIGluaXRDdXN0b21SZXBvcnQgfSBmcm9tIFwiLi9fdGVhY2hlci9jdXN0b21fcmVwb3J0LmpzXCI7XG5leHBvcnQgeyBpbml0IGFzIGluaXRHcmFkZWJvb2tzIH0gZnJvbSBcIi4vX3RlYWNoZXIvZ3JhZGVib29rcy5qc1wiO1xuZXhwb3J0IHsgaW5pdCBhcyBpbml0TWVzc2FnZXMgfSBmcm9tIFwiLi9fdGVhY2hlci9oZWFkZXIvbWVzc2FnZXMuanNcIjtcbmV4cG9ydCB7IGluaXQgYXMgaW5pdE5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi9fdGVhY2hlci9oZWFkZXIvbm90aWZpY2F0aW9ucy5qc1wiO1xuXG5leHBvcnQgeyBpbml0IGFzIGluaXRRdWVzdGlvbkNhcmRzIH0gZnJvbSBcIi4vX3RlYWNoZXIvZGFzaGJvYXJkL3F1ZXN0aW9ucy5qc1wiO1xuZXhwb3J0IHtcbiAgaW5pdCBhcyBpbml0U3R1ZGVudEFjdGl2aXR5Q2FyZHMsXG59IGZyb20gXCIuL190ZWFjaGVyL2Rhc2hib2FyZC9zdHVkZW50QWN0aXZpdHkuanNcIjtcbmV4cG9ydCB7XG4gIGluaXQgYXMgaW5pdFJhdGlvbmFsZXNUb1Njb3JlQ2FyZHMsXG59IGZyb20gXCIuL190ZWFjaGVyL2Rhc2hib2FyZC9yYXRpb25hbGVzLmpzXCI7XG5cbmV4cG9ydCB7IGluaXQgYXMgaW5pdFNlYXJjaEZsYWcgfSBmcm9tIFwiLi9fdGVhY2hlci9xdWVzdGlvbnMuanNcIjtcbiJdLCJuYW1lcyI6WyJnZXRDc3JmVG9rZW4iLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZ2V0QXR0cmlidXRlIiwiYnVpbGRSZXEiLCJkYXRhIiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIkVycm9yIiwibW9kZWwiLCJpbml0TW9kZWwiLCJ1cmxzIiwiZGFsaXRlTWVzc2FnZXMiLCJyZW1vdmVEYWxpdGVNZXNzYWdlIiwic2FsdGlzZUltYWdlIiwibWVzc2FnZXMiLCJ1cGRhdGUiLCJnZXRNZXNzYWdlcyIsInJlcSIsInJlc3AiLCJmZXRjaCIsImpzb24iLCJtYXAiLCJtZXNzYWdlIiwiaWQiLCJ0aXRsZSIsInRleHQiLCJjb2xvdXIiLCJyZW1vdmFibGUiLCJkYXRlIiwibGluayIsImF1dGhvcnMiLCJhdXRob3IiLCJuYW1lIiwicGljdHVyZSIsInJlbW92ZU1lc3NhZ2UiLCJkaXYiLCJvayIsInJlbW92ZU1lc3NhZ2VWaWV3IiwidmlldyIsIm1lc3NhZ2VzVmlldyIsInF1ZXJ5U2VsZWN0b3IiLCJsZW5ndGgiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJmb3JFYWNoIiwiYXBwZW5kQ2hpbGQiLCJtZXNzYWdlVmlldyIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJhZGQiLCJjb250ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIndpbmRvdyIsImxvY2F0aW9uIiwiYXNzaWduIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInRleHRDb250ZW50IiwiY2FwdGlvbiIsImlubmVySFRNTCIsImFjdGlvbnMiLCJpbWFnZXMiLCJhdXRob3JzQ29udGFpbmVyIiwiaW1nIiwic2V0QXR0cmlidXRlIiwiYnV0dG9ucyIsIm5vZGUiLCJwYXJlbnROb2RlIiwiY2hpbGRFbGVtZW50Q291bnQiLCJpbml0IiwiaW5pdE1lc3NhZ2VzIiwiZGFsaXRlX21lc3NhZ2VzIiwicmVtb3ZlX2RhbGl0ZV9tZXNzYWdlIiwic2FsdGlzZV9pbWFnZSIsImV2YWx1YXRlUmF0aW9uYWxlIiwidXBkYXRlUmF0aW9uYWxlc0V2YWx1YXRpb25BdHRyaWJ1dGVzIiwicXVlcnlTZWxlY3RvckFsbCIsInJhdGlvbmFsZSIsInVwZGF0ZVJhdGlvbmFsZUV2YWx1YXRpb25BdHRyaWJ1dGVzIiwiZXZhbHVhdGlvbiIsImV2YWx1YXRpb25fIiwicGFyc2VJbnQiLCJzdGFyIiwiaSIsInJlbW92ZUF0dHJpYnV0ZSIsImZsYWdSYXRpb25hbGUiLCJmbGFnIiwic2NvcmUiLCJyZWRpcmVjdCIsInJhdGlvbmFsZUV2YWx1YXRpb25WaWV3IiwidG9nZ2xlRmxhZ0hvdmVyIiwidG9nZ2xlU3RhckhvdmVyIiwiaG92ZXJpbmciLCJoYXNBdHRyaWJ1dGUiLCJzdGFycyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpZHgiLCJpbmRleE9mIiwiaW5pdExpc3RlbmVycyIsImFkZEZsYWdMaXN0ZW5lcnMiLCJhZGRFdmFsdWF0ZUxpc3RlbmVycyIsImNsZWFyIiwiaGFzQ2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwiY3JlYXRlU3ZnIiwidXNlU3ByaXRlIiwic3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwidXNlIiwic2V0QXR0cmlidXRlTlMiLCJzdmdMaW5rIiwiYXBwZW5kIiwicHJvdG9jb2wiLCJob3N0Iiwibm90aWZpY2F0aW9uc09wZW4iLCJub3RpZmljYXRpb25zIiwidG9nZ2xlTm90aWZpY2F0aW9ucyIsImhlYWRlciIsImhlYWRlcl8iLCJzaGFkb3dSb290IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50Iiwibm90aWZpY2F0aW9uc1ZpZXciLCJ1cGRhdGVOb3RpZmljYXRpb25zIiwiY2xlYXJBbGwiLCJub3RpZmljYXRpb24iLCJvbkNsb3NlQ2xpY2siLCJiYWRnZSIsIm5vdGlmaWNhdGlvbnNMaXN0IiwiY29tcGxldGVkTm90aWZpY2F0aW9ucyIsImZpbHRlciIsImluUHJvZ3Jlc3MiLCJ0b1N0cmluZyIsImRpc3BsYXkiLCJub3RpZmljYXRpb25WaWV3Iiwibm9Ob3RpZmljYXRpb25WaWV3Iiwic29tZSIsIm9uQ2xpY2siLCJzcGlubmVyIiwiaWNvbiIsImVycm9yIiwiZGVzY3JpcHRpb24iLCJpbml0RXZlbnRMaXN0ZW5lcnMiLCJhZGROb3RpZmljYXRpb25zT3Blbkxpc3RlbmVyIiwiYWRkQ2xlYXJBbGxMaXN0ZW5lciIsImV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiQ0hFQ0tfRVZFUlkiLCJ0YXNrcyIsInJlcXVlc3RHcmFkZWJvb2siLCJncmFkZWJvb2tSZXN1bHQiLCJyZW1vdmVGYWlsZWRHcmFkZWJvb2siLCJkb3dubG9hZEdyYWRlYm9vayIsImdldFRhc2tzIiwidXJsIiwidGhlbiIsImluaXRUYXNrcyIsInRhc2siLCJjb21wbGV0ZWQiLCJkYXRldGltZSIsIkRhdGUiLCJzb3J0IiwiYSIsImIiLCJnZXROb3RpZmljYXRpb25zIiwiUHJvbWlzZSIsImFsbCIsImdldEdyYWRlYm9va1Jlc3VsdCIsImJ1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJncm91cElkIiwiYXNzaWdubWVudElkIiwiZ3JvdXBfaWQiLCJhc3NpZ25tZW50X2lkIiwic3RhdHVzIiwic3BsaXQiLCJjc3YiLCJzbGljZSIsImpvaW4iLCJfZG93bmxvYWRHcmFkZWJvb2siLCJ1bnNoaWZ0Iiwic2V0VGltZW91dCIsImNvbnNvbGUiLCJsb2ciLCJ0YXNrX2lkIiwicmVzb2x2ZSIsInJlbW92ZUdyYWRlYm9va0Vycm9yIiwidCIsImhyZWYiLCJlc2NhcGUiLCJ0YXJnZXQiLCJkb3dubG9hZCIsImNsaWNrIiwidW5kZWZpbmVkIiwiYWRkR3JhZGVib29rTGlzdGVuZXJzIiwib3BlbiIsInRvZ2dsZU1lc3NhZ2VzIiwibWVzc2FnZXNVcmwiLCJ0aHJlYWRzIiwibGFzdFJlcGx5IiwibGFzdF9yZXBseSIsIm5OZXciLCJuX25ldyIsIm1hcmtBbGxSZWFkIiwibWFya1JlYWRVcmwiLCJtYXJrUmVhZCIsImJhZGdlVmlldyIsIm1lc3NhZ2VzTGlzdCIsIm5vTWVzc2FnZVZpZXciLCJuZXdfIiwibWFya1JlYWRCdG4iLCJhZGRNZXNzYWdlc09wZW5MaXN0ZW5lciIsImFkZE1hcmtBbGxSZWFkTGlzdGVuZXIiLCJmbGFnUXVlc3Rpb25VcmwiLCJnZXRGbGFnUXVlc3Rpb25SZWFzb25zVXJsIiwiZ2V0TmV3UXVlc3Rpb25VcmwiLCJ0b2dnbGVGYXZvdXJpdGVVcmwiLCJmbGFnUXVlc3Rpb25SZWFzb25zIiwiZmxhZ1F1ZXN0aW9uIiwiZ2V0RmxhZ1F1ZXN0aW9uUmVhc29ucyIsImdldE5ld1F1ZXN0aW9uIiwidG9nZ2xlRmF2b3VyaXRlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZGlyZWN0aW9uIiwiZWFzaW5nIiwidG9nZ2xlRmxhZ1F1ZXN0aW9uIiwicXVlc3Rpb24iLCJmb3JtIiwicmVhc29ucyIsImZsYWdRdWVzdGlvblZpZXciLCJzZWxlY3QiLCJyZWFzb24iLCJvcHRpb25zIiwic2VsZWN0ZWRJbmRleCIsInZhbHVlIiwicG9zdGluZyIsIiQiLCJnZXQiLCJkb25lIiwidG9nZ2xlIiwiaGlkZSIsImluaXROZXdDYXJkIiwiZmFpbCIsIngiLCJvcHRpb24iLCJhZGRGbGFnUXVlc3Rpb25MaXN0ZW5lcnMiLCJwcmV2ZW50RGVmYXVsdCIsImZhdlVybCIsInJlZnJlc2hVcmwiLCJlYWNoIiwiZWwiLCJmaW5kIiwiaGVhcnQiLCJidW5kbGUiLCJpY29uVG9nZ2xlIiwiTURDSWNvblRvZ2dsZSIsImF0dGFjaFRvIiwicG9zdCIsInBrIiwiZHJhdyIsImRhdGFzZXQiLCJwbG90VGltZVNlcmllcyIsIl9zdGFyIiwib25lIiwicHJvY2Vzc1Jlc3BvbnNlIiwiX2ZsYWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSJdLCJtYXBwaW5n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"}