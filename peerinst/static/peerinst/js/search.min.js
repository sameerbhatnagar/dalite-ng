(function (exports) {
'use strict';

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}

function updateAssignmentQuestionList(url, questionId, assignmentIdentifier) {
  var token = getCsrfToken();
  var data = {
    question_id: questionId,
    assignment_identifier: assignmentIdentifier
  };
  var req = {
    method: "POST",
    body: JSON.stringify(data),
    credentials: "include",
    headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": token
    }
  };
  fetch(url, req).then(function (resp) {
    if (!resp.ok) {
      console.log(resp);
    } else {
      // Manipulate DOM
      var list = document.getElementById("question-list");
      var card = document.getElementById(questionId);

      if ($.contains(list, card)) {
        $("#" + questionId).remove();
      } else {
        $("#" + questionId).find($(".update-questions-btn")).html("delete");
        var q = $("#" + questionId).detach();
        q.appendTo($("#question-list"));
        $("#empty-assignment-list").remove();
        $(".search-set").each(function () {
          $(this) // eslint-disable-line no-invalid-this
          .find(".filter-count").empty().append($(this).find(".mdc-card:visible").length); // eslint-disable-line no-invalid-this,max-len
        });
        $(".search-set").each(function () {
          $(this) // eslint-disable-line no-invalid-this
          .find(".filter-count-total").empty().append($(this).find(".mdc-card").length); // eslint-disable-line no-invalid-this,max-len
        });
      }
    }
  }).catch(function (err) {
    console.log(err);
  });
}

/** Recount search results
 *  @function
 */

function recountResults() {
  $(".search-set").each(function () {
    $(this) // eslint-disable-line
    .find(".filter-count").empty().append($(this).find(".mdc-card:visible").length); // eslint-disable-line
  });
}
/** Filter search results
 *  @function
 *  @param {String} el
 */

function filter(el) {
  if ($(el).hasClass("mdc-chip--selected")) {
    $(el).removeClass("mdc-chip--selected");
  } else {
    $(el).addClass("mdc-chip--selected");
  }

  if ($(".mdc-chip--selected").length == 0) {
    $("#reset-filters").attr("disabled", true);
  }

  $("#search_results .mdc-card").css("display", "block");
  $("#search_results .mdc-card").each(function () {
    var card = this; // eslint-disable-line

    $("#filter-on-category").find(".mdc-chip--selected").each(function () {
      if (card.getAttribute("category").toLowerCase().indexOf(this.getAttribute("c").toLowerCase()) < 0 // eslint-disable-line
      ) {
          $(card).css("display", "none");
          $("#reset-filters").attr("disabled", false);
        }
    });
    $("#filter-on-discipline").find(".mdc-chip--selected").each(function () {
      if (card.getAttribute("discipline").slice(1, -1).toLowerCase() != this.getAttribute("d").toLowerCase() // eslint-disable-line
      ) {
          $(card).css("display", "none");
          $("#reset-filters").attr("disabled", false);
        }
    });
  });
  recountResults();
}
/** Reset filters
 *  @function
 */

function reset() {
  $("#search_results .mdc-card").each(function () {
    $(this).css("display", "block"); // eslint-disable-line

    $(".mdc-chip").removeClass("mdc-chip--selected");
    $("#reset-filters").attr("disabled", true);
  });
  recountResults();
}
/** Process response for required filters
 *  @function
 */

function processResponse() {
  bundle.toggleImages();
  bundle.toggleAnswers();
  $("#search-bar").attr("disabled", false);
  $("#progressbar").addClass("mdc-linear-progress--closed"); // Update template response

  $(".search-nav").each(function (i, el) {
    el.addEventListener("click", function () {
      pageNav(el.getAttribute("data-page"));
    });
  });
  $(".update-questions-btn").each(function (i, el) {
    el.addEventListener("click", function () {
      updateAssignmentQuestionList(el.getAttribute("data-url"), el.getAttribute("data-id"), el.getAttribute("data-assignment-id"));
    });
  }); // Add filters based on search results

  $("#filter-on-discipline").empty();
  $("#filter-on-category").empty();
  var disciplineList = [];
  $("#filter-on-discipline").append("<div class='mdc-chip-set mdc-chip-set--filter' " + "data-mdc-auto-init='MDCChipSet'></div>");
  $("#search_results .mdc-card").each(function (index) {
    var d = this.getAttribute("discipline"); // eslint-disable-line

    if (!disciplineList.includes(d) & d.slice(1, -1) != "None") {
      disciplineList.push(d);
    }
  });
  disciplineList.sort();

  for (var i = 0; i < disciplineList.length; i++) {
    $("#filter-on-discipline .mdc-chip-set").append("<div d=" + disciplineList[i] + " class='mdc-chip' " + "tabindex='0' data-mdc-auto-init='MDCChip'>" + "<div class='mdc-chip__checkmark' >" + "<svg class='mdc-chip__checkmark-svg' viewBox='-2 -3 30 30'>" + "<path class='mdc-chip__checkmark-path' fill='none' stroke='black'" + "d='M1.73,12.91 8.1,19.28 22.79,4.59'/>" + "</svg>" + "</div>" + "<div class='mdc-chip__text'>" + disciplineList[i].slice(1, -1) + "</div>" + "</div>");
  }

  $("#filter-on-discipline .mdc-chip").each(function (i, el) {
    el.addEventListener("click", function () {
      filter(el);
    });
  });
  var categoryList = [];
  $("#filter-on-category").append("<div class='mdc-chip-set mdc-chip-set--filter' " + "data-mdc-auto-init='MDCChipSet'></div>");
  $("#search_results .mdc-card").each(function () {
    var c = this.getAttribute("category"); // eslint-disable-line

    var list = c.split(",");
    $(list).each(function (i) {
      if (!categoryList.includes(list[i].toLowerCase()) & list[i] != "") {
        categoryList.push(list[i].toLowerCase());
      }
    });
  });
  categoryList.sort();

  for (var _i = 0; _i < categoryList.length; _i++) {
    $("#filter-on-category .mdc-chip-set").append("<div c=" + categoryList[_i] + " class='mdc-chip' tabindex='0' " + "data-mdc-auto-init='MDCChip'>" + "<div class='mdc-chip__checkmark' >" + "<svg class='mdc-chip__checkmark-svg' viewBox='-2 -3 30 30'>" + "<path class='mdc-chip__checkmark-path' fill='none' " + "stroke='black'" + "d='M1.73,12.91 8.1,19.28 22.79,4.59'/>" + "</svg>" + "</div>" + "<div class='mdc-chip__text'>" + categoryList[_i] + "</div>" + "</div>");
  }

  $("#filter-on-category .mdc-chip").each(function (i, el) {
    el.addEventListener("click", function () {
      filter(el);
    });
  });

  if ((disciplineList.length > 1 || categoryList.length > 1) && $("#search_results .mdc-card").length > 1) {
    $("#filters").css("display", "block");
    window.location.href = "#filters";
  } else {
    window.location.href = "#search_results";
  }

  if (disciplineList.length > 1) {
    $("#discipline-filters").css("display", "block");
  }

  if (categoryList.length > 1) {
    $("#category-filters").css("display", "block");
  }

  [].forEach.call(document.querySelectorAll(".mdc-chip"), function (el) {
    bundle.chips.MDCChip.attachTo(el);
  });
  [].forEach.call(document.querySelectorAll(".mdc-chip-set"), function (el) {
    bundle.chips.MDCChipSet.attachTo(el);
  });
  [].forEach.call(document.querySelectorAll(".mdc-icon-toggle"), function (el) {
    bundle.iconToggle.MDCIconToggle.attachTo(el);
  });
  [].forEach.call(document.querySelectorAll("#search_results .mdc-card"), function (el) {
    bundle.difficulty(el.getAttribute("matrix").replace(/'/g, '"'), el.id); // eslint-disable-line
  });
}
/** Set up search
 *  @function
 */

function setupSearch() {
  $("#search_results").empty();
  $("#filters").css("display", "none");
  $("#show-discipline-filters").css("display", "none");
  $("#show-category-filters").css("display", "none");
  $("#search-bar").attr("disabled", true);
  $("#progressbar").removeClass("mdc-linear-progress--closed");
  window.location.href = "#progressbar";
}
/** Initialize likes
 *  @function
 */

function initFavourites() {
  [].forEach.call(document.querySelectorAll(".mdc-icon-toggle"), function (el) {
    bundle.iconToggle.MDCIconToggle.attachTo(el);
  });
}

exports.recountResults = recountResults;
exports.filter = filter;
exports.reset = reset;
exports.processResponse = processResponse;
exports.setupSearch = setupSearch;
exports.initFavourites = initFavourites;

}((this.search = this.search || {})));
//# sourceMappingURL=search.min.js.map
