(function (exports) {
'use strict';

function submitForm() {
  document.querySelector("#submit-answer-form").submit();
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

/*********/

/* model */

/*********/

var model;

function initModel(submitUrl, quality) {
  model = {
    urls: {
      submitUrl: submitUrl
    },
    quality: quality
  };
}
/**********/

/* update */

/**********/


function validateFormSubmit(event) {
  if (!document.getElementById("your-rationale")) {
    event.preventDefault();
    var data = {
      quality: model.quality,
      rationale: document.querySelector("#id_rationale").value
    };
    var req = buildReq(data, "post");
    fetch(model.urls.submitUrl, req).then(function (resp) {
      return resp.json();
    }).then(function (failed) {
      if (failed.failed.length) {
        toggleQualityError(failed.failed, failed.error_msg);
        document.querySelector("#answer-form").disabled = false;
      } else {
        toggleQualityError();
        document.querySelector("#answer-form").disabled = true;
        document.querySelector("#submit-answer-form").submit();
      }
    }).catch(function (err) {
      return console.log(err);
    });
  }
}
/********/

/* view */

/********/


function toggleQualityError(data, errorMsg) {
  if (data) {
    var form = document.querySelector("#submit-answer-form");
    var div = document.querySelector(".errorlist");

    if (!div) {
      div = document.createElement("div");
    }

    clear(div);
    div.classList.add("errorlist");
    div.textContent = errorMsg;
    var ul = document.createElement("ul");
    div.append(ul);
    data.forEach(function (criterion) {
      var li = document.createElement("li");
      li.textContent = criterion.name;
      li.title = criterion.description;
      ul.append(li);
    });
    form.parentNode.insertBefore(div, form);
  } else {
    var err = document.querySelector("errorlist");

    if (err) {
      err.parentNode.removeChild(err);
    }
  }
}
/*************/

/* listeners */

/*************/


function initListeners() {
  addSubmitListener();
}

function addSubmitListener() {
  var input = document.getElementById("answer-form");

  if (input) {
    input.addEventListener("click", function (event) {
      validateFormSubmit(event);
    });
  }
}
/********/

/* init */

/********/


function init(submitUrl, quality) {
  initModel(submitUrl, quality);
  initListeners();
}

/*********/

/* model */

/*********/
var model$1;

function initModel$1() {
  model$1 = {
    submitAllowed: false
  };
}
/**********/

/* update */

/**********/


function startSubmitAllowedTimer(seconds) {
  setInterval(allowSubmit, seconds * 1000);
}

function allowSubmit() {
  model$1.submitAllowed = true;
  submitButtonView();
}
/********/

/* view */

/********/


function view() {
  submitButtonView();
}

function submitButtonView() {
  if (model$1.submitAllowed) {
    // $FlowFixMe
    document.getElementById("answer-form").disabled = false;
  } else {
    // $FlowFixMe
    document.getElementById("answer-form").disabled = true;
  }
}
/********/

/* init */

/********/


function init$1() {
  initModel$1();
  view();
  startSubmitAllowedTimer(5);
}

"use strict";

exports.submitForm = submitForm;
exports.initStart = init;
exports.initReview = init$1;

}((this.question = this.question || {})));
//# sourceMappingURL=question.min.js.map
