(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

/*********/

/* model */

/*********/

var model;

function initModel(data) {
  model = {
    urls: {
      daliteMessages: data.urls.daliteMessages,
      removeDaliteMessage: data.urls.removeDaliteMessage,
      saltiseImage: data.urls.saltiseImage
    },
    messages: []
  };
}
/**********/

/* update */

/**********/


function update() {
  return _update.apply(this, arguments);
}

function _update() {
  _update = _asyncToGenerator(function* () {
    yield getMessages();
  });
  return _update.apply(this, arguments);
}

function getMessages() {
  return _getMessages.apply(this, arguments);
}

function _getMessages() {
  _getMessages = _asyncToGenerator(function* () {
    var req = buildReq({}, "post");
    var resp = yield fetch(model.urls.daliteMessages, req);
    var data = yield resp.json();
    model.messages = data.messages.map(function (message) {
      return {
        id: message.id,
        title: message.title,
        text: message.text,
        colour: message.colour,
        removable: message.removable,
        date: message.date,
        link: message.link,
        authors: message.authors.map(function (author) {
          return {
            name: author.name,
            picture: author.picture
          };
        })
      };
    });
  });
  return _getMessages.apply(this, arguments);
}

function removeMessage(_x, _x2) {
  return _removeMessage.apply(this, arguments);
}
/********/

/* view */

/********/


function _removeMessage() {
  _removeMessage = _asyncToGenerator(function* (message, div) {
    var data = {
      id: message.id
    };
    var req = buildReq(data, "post");
    var resp = yield fetch(model.urls.removeDaliteMessage, req);

    if (resp.ok) {
      removeMessageView(div);
    }
  });
  return _removeMessage.apply(this, arguments);
}

function view() {
  messagesView();
}

function messagesView() {
  var messages = document.querySelector("#dalite-messages");

  if (model.messages.length) {
    messages.classList.remove("hidden");
    model.messages.forEach(function (message) {
      messages.appendChild(messageView(message));
    });
  } else {
    messages.remove();
  }
}

function messageView(message) {
  var container = document.createElement("div");
  container.classList.add("mdc-card");
  var content = document.createElement("div");

  if (message.link) {
    content.addEventListener("click", function () {
      window.location.assign(message.link);
    });
    content.style.setProperty("cursor", "pointer");
    content.title = message.link;
  }

  var title = document.createElement("div");
  title.classList.add("mdc-typography--title", "bold");
  title.textContent = message.title;
  content.appendChild(title);
  var caption = document.createElement("div");
  caption.classList.add("mdc-typography--caption");
  caption.textContent = message.date;
  content.appendChild(caption);
  var text = document.createElement("div");
  text.classList.add("mdc-typography--body1");
  text.innerHTML = message.text;
  content.appendChild(text);
  container.appendChild(content);
  var actions = document.createElement("div");
  actions.classList.add("mdc-card__actions");
  var images = document.createElement("div");
  images.classList.add("mdc-card__action-buttons");

  if (message.authors.length) {
    var authorsContainer = document.createElement("div");
    authorsContainer.classList.add("dalite-message__authors");
    message.authors.forEach(function (author) {
      var img = document.createElement("img");
      img.classList.add("dalite-message__authors_author");
      img.title = author.name;
      img.setAttribute("src", author.picture ? author.picture : model.urls.saltiseImage);
      img.setAttribute("alt", "Picture of ".concat(author.name));
      authorsContainer.appendChild(img);
    });
    images.appendChild(authorsContainer);
  }

  actions.appendChild(images);

  if (message.removable) {
    var buttons = document.createElement("div");
    buttons.classList.add("mdc-card__action-icons");
    var remove = document.createElement("i");
    remove.classList.add("mdc-icon-toggle", "material-icons", "mdc-theme--primary");
    remove.textContent = "clear";
    remove.addEventListener("click", /*#__PURE__*/_asyncToGenerator(function* () {
      yield removeMessage(message, container);
    }));
    buttons.appendChild(remove);
    actions.appendChild(buttons);
  }

  container.appendChild(actions);
  container.style.setProperty("background-color", message.colour);
  return container;
}

function removeMessageView(node) {
  if (node.parentNode.childElementCount == 3) {
    node.parentNode.remove();
  } else {
    node.remove();
  }
}
/********/

/* init */

/********/


function init$1(_x3) {
  return _init$1.apply(this, arguments);
}

function _init$1() {
  _init$1 = _asyncToGenerator(function* (data) {
    initModel(data);
    yield update();
    view();
  });
  return _init$1.apply(this, arguments);
}

/********/

/* init */

/********/

function init$$1(_x) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (data) {
    init$1({
      urls: {
        daliteMessages: data.urls.dalite_messages,
        removeDaliteMessage: data.urls.remove_dalite_message,
        saltiseImage: data.urls.saltise_image
      }
    });
  });
  return _init.apply(this, arguments);
}

/*********/

/* model */

/*********/

var model$1;

function initModel$1(urls) {
  model$1 = {
    urls: {
      evaluateRationale: urls.evaluateRationale
    }
  };
}
/**********/

/* update */

/**********/


function update$1() {
  updateRationalesEvaluationAttributes();
}

function updateRationalesEvaluationAttributes() {
  document.querySelectorAll(".custom-report__rationale").forEach(function (rationale) {
    updateRationaleEvaluationAttributes(rationale);
  });
}

function updateRationaleEvaluationAttributes(rationale) {
  var evaluation = rationale.getAttribute("data-score");

  if (evaluation != "") {
    var evaluation_ = parseInt(evaluation);

    if (evaluation_ == 0) {
      rationale.querySelector(".flag").setAttribute("data-flagged", "");
      rationale.querySelectorAll(".star").forEach(function (star, i) {
        star.removeAttribute("data-starred");
      });
    } else {
      rationale.querySelector(".flag").removeAttribute("data-flagged");
      rationale.querySelectorAll(".star").forEach(function (star, i) {
        if (3 - i <= evaluation_) {
          star.setAttribute("data-starred", "");
        } else {
          star.removeAttribute("data-starred");
        }
      });
    }
  }
}

function flagRationale(_x) {
  return _flagRationale.apply(this, arguments);
}

function _flagRationale() {
  _flagRationale = _asyncToGenerator(function* (flag) {
    var rationale = flag.parentNode.parentNode;
    var data = {
      id: flag.parentNode.parentNode.getAttribute("data-id"),
      score: 0,
      redirect: false
    };
    var req = buildReq(data, "post");
    var resp = yield fetch(model$1.urls.evaluateRationale, req);

    if (resp.ok) {
      flag.setAttribute("data-flagged", "");
      rationale.setAttribute("data-score", "0");
    }

    updateRationaleEvaluationAttributes(rationale);
    rationaleEvaluationView();
  });
  return _flagRationale.apply(this, arguments);
}

function evaluateRationale(_x2, _x3) {
  return _evaluateRationale.apply(this, arguments);
}
/********/

/* view */

/********/


function _evaluateRationale() {
  _evaluateRationale = _asyncToGenerator(function* (star, score) {
    var rationale = star.parentNode.parentNode;
    var data = {
      id: star.parentNode.parentNode.getAttribute("data-id"),
      score: score,
      redirect: false
    };
    var req = buildReq(data, "post");
    var resp = yield fetch(model$1.urls.evaluateRationale, req);

    if (resp.ok) {
      flag.setAttribute("data-flagged", "");
      rationale.setAttribute("data-score", "".concat(score));
    }

    updateRationaleEvaluationAttributes(rationale);
    rationaleEvaluationView();
  });
  return _evaluateRationale.apply(this, arguments);
}

function view$1() {
  rationaleEvaluationView();
}

function rationaleEvaluationView() {
  document.querySelectorAll(".custom-report__rationale__evaluation").forEach(function (rationale) {
    toggleFlagHover(rationale.querySelector(".flag"));
    rationale.querySelectorAll(".star").forEach(function (star) {
      return toggleStarHover(star);
    });
  });
}

function toggleFlagHover(flag) {
  var hovering = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (hovering || flag.hasAttribute("data-flagged")) {
    flag.textContent = "flag";
  } else {
    flag.textContent = "outlined_flag";
  }
}

function toggleStarHover(star) {
  var hovering = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var stars = _toConsumableArray(star.parentNode.getElementsByClassName("star"));

  var idx = stars.indexOf(star);
  stars.forEach(function (star, i) {
    if (star.hasAttribute("data-starred") || hovering && i >= idx) {
      star.textContent = "star";
    } else {
      star.textContent = "star_border";
    }
  });
}
/*************/

/* listeners */

/*************/


function initListeners() {
  addFlagListeners();
  addEvaluateListeners();
}

function addFlagListeners() {
  document.querySelectorAll(".custom-report__rationale__evaluation .flag").forEach(function (flag) {
    flag.addEventListener("mouseenter", function () {
      return toggleFlagHover(flag, true);
    });
    flag.addEventListener("mouseleave", function () {
      return toggleFlagHover(flag, false);
    });
    flag.addEventListener("click", function () {
      return flagRationale(flag);
    });
  });
}

function addEvaluateListeners() {
  document.querySelectorAll(".custom-report__rationale__evaluation").forEach(function (rationale) {
    rationale.querySelectorAll(".star").forEach(function (star, i) {
      star.addEventListener("mouseenter", function () {
        return toggleStarHover(star, true);
      });
      star.addEventListener("mouseleave", function () {
        return toggleStarHover(star, false);
      });
      star.addEventListener("click", function () {
        return evaluateRationale(star, 3 - i);
      });
    });
  });
}
/********/

/* init */

/********/


function init$2(urls) {
  initModel$1(urls);
  update$1();
  view$1();
  initListeners();
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

function createSvg(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
  use.setAttributeNS("http://www.w3.org/1999/xlink", "href", svgLink(name, useSprite));
  svg.append(use);
  return svg;
}
function svgLink(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (useSprite) {
    return "#".concat(name);
  } else {
    return window.location.protocol + "//" + window.location.host + "/static/peerinst/icons.svg#" + name;
  }
}

/*********/

/* model */

/*********/

var model$3;

function initModel$3() {
  model$3 = {
    notificationsOpen: false,
    notifications: []
  };
}
/**********/

/* update */

/**********/


function toggleNotifications() {
  var header = document.querySelector(".notifications");
  document.querySelectorAll(".header--togglable > *").forEach(function (header_) {
    if (header_ != header && header_.hasAttribute("open")) {
      if (header_.shadowRoot) {
        header_.shadowRoot.querySelector(".header__icon").dispatchEvent(new Event("click"));
      } else {
        header_.querySelector(".header__icon").dispatchEvent(new Event("click"));
      }
    }
  });
  model$3.notificationsOpen = !model$3.notificationsOpen;
  notificationsView();
}

function updateNotifications(notifications) {
  model$3.notifications = notifications;
  notificationsView();
}

function clearAll() {
  model$3.notifications.forEach(function (notification) {
    notification.onCloseClick();
  });
}
/********/

/* view */

/********/


function view$2() {
  notificationsView();
}

function notificationsView() {
  var notifications = document.querySelector(".notifications");
  var badge = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__icon__badge");
  var notificationsList = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__notifications");

  if (!notifications || !badge || !notificationsList) {
    return;
  }

  var completedNotifications = model$3.notifications.filter(function (notification) {
    return !notification.inProgress;
  });

  if (completedNotifications.length > 0) {
    badge.textContent = completedNotifications.length.toString();
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }

  clear(notificationsList);

  if (model$3.notifications.length) {
    model$3.notifications.map(function (notification) {
      notificationsList.appendChild(notificationView(notification));
    });
    document.querySelector(".notifications__clear-all-btn").removeAttribute("hidden");
  } else {
    notificationsList.appendChild(noNotificationView());
    document.querySelector(".notifications__clear-all-btn").setAttribute("hidden", "");
  }

  if (model$3.notifications.some(function (notification) {
    return notification.inProgress;
  })) {
    var _document$querySelect;

    (_document$querySelect = document.querySelector(".notifications__spinner")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.classList.add("notifications__spinner--loading");
  } else {
    var _document$querySelect2;

    (_document$querySelect2 = document.querySelector(".notifications__spinner")) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.classList.remove("notifications__spinner--loading");
  }

  if (model$3.notificationsOpen) {
    notifications.setAttribute("open", "");
    notifications.classList.add("notifications--open");
  } else {
    notifications.removeAttribute("open");
    notifications.classList.remove("notifications--open");
  }
}

function notificationView(notification) {
  var div = document.createElement("div");
  div.classList.add("notification");
  div.addEventListener("click", notification.onClick);

  if (notification.inProgress) {
    var spinner = document.createElement("loading-spinner");
    spinner.classList.add("notification__spinner");
    div.appendChild(spinner);
  } else {
    var icon;

    if (notification.error) {
      icon = createSvg("error");
      icon.classList.add("notification__icon--error");
    } else {
      div.classList.add("notification--completed");
      icon = createSvg("cloud_download");
    }

    icon.classList.add("notification__icon");
    div.appendChild(icon);
  }

  var description = document.createElement("span");
  description.classList.add("notification__description");
  description.innerHTML = notification.text;
  div.appendChild(description);
  var remove = createSvg("close");
  remove.classList.add("notification__close");
  remove.addEventListener("click", notification.onCloseClick);
  div.appendChild(remove);
  return div;
}

function noNotificationView() {
  var div = document.createElement("div");
  div.textContent = "No new notifications";
  return div;
}
/*************/

/* listeners */

/*************/


function initEventListeners() {
  addNotificationsOpenListener();
  addClearAllListener();
}

function addNotificationsOpenListener() {
  var _document$querySelect3, _document$querySelect4, _document$body;

  (_document$querySelect3 = document.querySelector(".notifications")) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.addEventListener("click", function (event) {
    event.stopPropagation();
  });
  (_document$querySelect4 = document.querySelector(".notifications__icon")) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.addEventListener("click", function (event) {
    toggleNotifications();
  });
  (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
    if (model$3.notificationsOpen) {
      event.stopPropagation();
      toggleNotifications();
    }
  });
}

function addClearAllListener() {
  var _document$querySelect5;

  (_document$querySelect5 = document.querySelector(".notifications__clear-all-btn")) === null || _document$querySelect5 === void 0 ? void 0 : _document$querySelect5.addEventListener("click", function () {
    return clearAll();
  });
}
/********/

/* init */

/********/


function init$4() {
  initModel$3();
  view$2();
  initEventListeners();
}

/*********/

/* model */

/*********/
var CHECK_EVERY = 1;
var model$2;

function initModel$2(urls) {
  model$2 = {
    tasks: [],
    urls: {
      requestGradebook: urls.requestGradebook,
      gradebookResult: urls.gradebookResult,
      removeFailedGradebook: urls.removeFailedGradebook,
      downloadGradebook: urls.downloadGradebook,
      tasks: urls.tasks
    }
  };
}
/**********/

/* update */

/**********/


function update$2() {
  getTasks();
}

function getTasks() {
  var url = model$2.urls.tasks;
  var req = buildReq({}, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    initTasks(data.tasks);
  });
}

function initTasks(_x) {
  return _initTasks.apply(this, arguments);
}

function _initTasks() {
  _initTasks = _asyncToGenerator(function* (data) {
    model$2.tasks = data.map(function (task) {
      return {
        id: task.id,
        description: task.description,
        completed: task.completed,
        datetime: new Date(task.datetime),
        error: false
      };
    }).sort(function (a, b) {
      return a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0;
    });
    updateNotifications(getNotifications());
    Promise.all(model$2.tasks.filter(function (task) {
      return !task.completed;
    }).map(function (task) {
      return getGradebookResult(task);
    }));
  });
  return _initTasks.apply(this, arguments);
}

function requestGradebook(_x2) {
  return _requestGradebook.apply(this, arguments);
}

function _requestGradebook() {
  _requestGradebook = _asyncToGenerator(function* (event) {
    event.stopPropagation();
    var button = event.currentTarget;
    var groupId = button.getAttribute("data-group");
    var assignmentId = button.getAttribute("data-assignment");
    var data = {
      group_id: groupId,
      assignment_id: assignmentId
    };
    var url = model$2.urls.requestGradebook;
    var req = buildReq(data, "post");
    var resp = yield fetch(url, req);

    if (resp.status === 200) {
      var _data = yield resp.text();

      var title = _data.split("\n")[0];

      var csv = _data.split("\n").slice(1).join("\n");

      _downloadGradebook(title, csv);
    } else if (resp.status === 201) {
      var _data2 = yield resp.json();

      var task = {
        id: _data2.id,
        description: _data2.description,
        completed: _data2.completed,
        datetime: new Date(_data2.datetime),
        error: false
      };
      model$2.tasks.unshift(task);
      setTimeout(function () {
        return getGradebookResult(task);
      }, 0);
      updateNotifications(getNotifications());
    } else {
      console.log(resp);
    }
  });
  return _requestGradebook.apply(this, arguments);
}

function getGradebookResult(_x3) {
  return _getGradebookResult.apply(this, arguments);
}

function _getGradebookResult() {
  _getGradebookResult = _asyncToGenerator(function* (task) {
    var url = model$2.urls.gradebookResult;
    var req = buildReq({
      task_id: task.id
    }, "post");
    var resp = yield fetch(url, req);

    if (resp.status == 200) {
      task.completed = true;
      updateNotifications(getNotifications());
    } else if (resp.status == 202) {
      yield new Promise(function (resolve) {
        return setTimeout(function () {
          return getGradebookResult(task);
        }, CHECK_EVERY * 1000);
      });
    } else {
      task.completed = true;
      task.error = true;
      updateNotifications(getNotifications());
    }
  });
  return _getGradebookResult.apply(this, arguments);
}

function removeGradebookError(_x4) {
  return _removeGradebookError.apply(this, arguments);
}

function _removeGradebookError() {
  _removeGradebookError = _asyncToGenerator(function* (task) {
    var url = model$2.urls.removeFailedGradebook;
    var req = buildReq({
      task_id: task.id
    }, "post");
    var resp = yield fetch(url, req);

    if (resp.ok) {
      model$2.tasks = model$2.tasks.filter(function (t) {
        return t.id !== task.id;
      });
    }

    updateNotifications(getNotifications());
  });
  return _removeGradebookError.apply(this, arguments);
}

function downloadGradebook(_x5) {
  return _downloadGradebook2.apply(this, arguments);
}

function _downloadGradebook2() {
  _downloadGradebook2 = _asyncToGenerator(function* (task) {
    var data = {
      task_id: task.id
    };
    var url = model$2.urls.downloadGradebook;
    var req = buildReq(data, "post");
    var resp = yield fetch(url, req);

    if (resp.ok) {
      var _data3 = yield resp.text();

      var title = _data3.split("\n")[0];

      var csv = _data3.split("\n").slice(1).join("\n");

      _downloadGradebook(title, csv);

      model$2.tasks = model$2.tasks.filter(function (t) {
        return t.id != task.id;
      });
      updateNotifications(getNotifications());
    } else {
      console.log(resp);
    }
  });
  return _downloadGradebook2.apply(this, arguments);
}

function _downloadGradebook(title, csv) {
  var a = document.createElement("a");
  a.href = "data:text/csv;charset=utf-8, ".concat(escape(csv));
  a.target = "_blank";
  a.download = title;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}

function getNotifications() {
  return model$2.tasks.map(function (task) {
    return {
      text: task.completed ? task.error ? "There was an error creating the gradebook for ".concat(task.description, ".") : "The ".concat(task.description, " is ready.") : "Computing the ".concat(task.description, "..."),
      inProgress: !task.completed,
      error: task.error,
      onClick: task.completed && !task.error ? /*#__PURE__*/_asyncToGenerator(function* () {
        return yield downloadGradebook(task);
      }) : /*#__PURE__*/_asyncToGenerator(function* () {
        return undefined;
      }),
      onCloseClick: function () {
        var _onCloseClick = _asyncToGenerator(function* () {
          return yield removeGradebookError(task);
        });

        function onCloseClick() {
          return _onCloseClick.apply(this, arguments);
        }

        return onCloseClick;
      }()
    };
  });
}
/********/

/* view */

/********/

/*************/

/* listeners */

/*************/


function initListeners$1() {
  addGradebookListeners();
}

function addGradebookListeners() {
  _toConsumableArray(document.getElementsByClassName("gradebook-button")).forEach(function (button) {
    button.addEventListener("click", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (event) {
        return yield requestGradebook(event);
      });

      return function (_x6) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
}
/********/

/* init */

/********/


function init$3(urls) {
  initModel$2(urls);
  update$2();
  initListeners$1();
}

/*********/

/* model */

/*********/

var model$4;

function initModel$4(urls) {
  model$4 = {
    open: false,
    messages: [],
    urls: urls
  };
}
/**********/

/* update */

/**********/


function update$3() {
  getMessages$1();
}

function toggleMessages() {
  var header = document.querySelector(".messages");
  document.querySelectorAll(".header--togglable > *").forEach(function (header_) {
    if (header_ != header && header_.hasAttribute("open")) {
      if (header_.shadowRoot) {
        header_.shadowRoot.querySelector(".header__icon").dispatchEvent(new Event("click"));
      } else {
        header_.querySelector(".header__icon").dispatchEvent(new Event("click"));
      }
    }
  });
  model$4.open = !model$4.open;
  messagesView$1();
}

function getMessages$1() {
  var url = model$4.urls.messagesUrl;
  var req = buildReq({}, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    model$4.messages = data.threads.map(function (message) {
      return {
        id: message.id,
        title: message.title,
        lastReply: {
          author: message.last_reply.author,
          content: message.last_reply.content,
          date: message.last_reply.date
        },
        nNew: message.n_new,
        link: message.link
      };
    });
    messagesView$1();
  });
}

function markAllRead() {
  return _markAllRead.apply(this, arguments);
}

function _markAllRead() {
  _markAllRead = _asyncToGenerator(function* () {
    var req = buildReq({}, "post");
    var resp = yield fetch(model$4.urls.markReadUrl, req);

    if (resp.ok) {
      model$4.messages.forEach(function (message) {
        message.nNew = 0;
      });
    }

    messagesView$1();
  });
  return _markAllRead.apply(this, arguments);
}

function markRead(_x, _x2, _x3) {
  return _markRead.apply(this, arguments);
}
/********/

/* view */

/********/


function _markRead() {
  _markRead = _asyncToGenerator(function* (event, message, div) {
    event.stopPropagation();
    var req = buildReq({
      id: message.id
    }, "post");
    var resp = yield fetch(model$4.urls.markReadUrl, req);

    if (resp.ok) {
      message.nNew = 0;
    }

    messageView$1(message, div);
    badgeView();
  });
  return _markRead.apply(this, arguments);
}

function view$3() {
  messagesView$1();
}

function messagesView$1() {
  var messages = document.querySelector(".messages");
  var badge = messages === null || messages === void 0 ? void 0 : messages.querySelector(".messages__icon__badge");
  var messagesList = messages === null || messages === void 0 ? void 0 : messages.querySelector(".messages__messages");

  if (!messages || !badge || !messagesList) {
    return;
  }

  badgeView();
  clear(messagesList);
  document.querySelector(".messages__read-all-btn").classList.add("hidden");
  var nNew = model$4.messages.filter(function (message) {
    return message.nNew > 0;
  }).length;

  if (nNew) {
    document.querySelector(".messages__read-all-btn").classList.remove("hidden");
  }

  if (model$4.messages.length) {
    model$4.messages.map(function (message) {
      messagesList.appendChild(messageView$1(message));
    });
  } else {
    messagesList.appendChild(noMessageView());
  }

  if (model$4.open) {
    messages.setAttribute("open", "");
    messages.classList.add("messages--open");
  } else {
    messages.removeAttribute("open");
    messages.classList.remove("messages--open");
  }
}

function badgeView() {
  var badge = document.querySelector(".messages__icon__badge");
  var nNew = model$4.messages.filter(function (message) {
    return message.nNew > 0;
  }).length;

  if (nNew) {
    badge.textContent = nNew.toString();
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }
}

function messageView$1(message) {
  var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (div) {
    clear(div);
  } else {
    div = document.createElement("div");
    div.classList.add("message");
    div.addEventListener("click", function () {
      window.location.href = message.link;
    });
  }

  var title = document.createElement("div");
  title.classList.add("message__title");
  title.textContent = message.title;
  div.appendChild(title);

  if (message.nNew) {
    div.classList.add("message--new");
  } else {
    div.classList.remove("message--new");
  }

  if (message.nNew) {
    var new_ = document.createElement("div");
    new_.classList.add("message__new");
    new_.textContent = "New!";
    div.appendChild(new_);
  }

  if (message.lastReply.author) {
    var lastReply = document.createElement("div");
    lastReply.classList.add("message__last-reply");
    div.appendChild(lastReply);
    var content = document.createElement("span");
    content.classList.add("message__last-reply__content");
    content.textContent = message.lastReply.content;
    lastReply.appendChild(content);
    var author = document.createElement("div");
    author.classList.add("message__last-reply__author");
    author.innerHTML = message.lastReply.author + " &middot; " + message.lastReply.date;

    if (message.nNew) {
      var markReadBtn = document.createElement("span");
      markReadBtn.classList.add("message__mark-read");
      markReadBtn.textContent = "clear";
      markReadBtn.title = "Mark read";
      markReadBtn.addEventListener("click", function (event) {
        return markRead(event, message, div);
      });
      author.appendChild(markReadBtn);
    }

    lastReply.appendChild(author);
  }

  return div;
}

function noMessageView() {
  var div = document.createElement("div");
  div.textContent = "No messages";
  return div;
}
/*************/

/* listeners */

/*************/


function initEventListeners$1() {
  addMessagesOpenListener();
  addMarkAllReadListener();
}

function addMessagesOpenListener() {
  var _document$querySelect, _document$querySelect2, _document$body;

  (_document$querySelect = document.querySelector(".messages")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.addEventListener("click", function (event) {
    event.stopPropagation();
  });
  (_document$querySelect2 = document.querySelector(".messages__icon")) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.addEventListener("click", function (event) {
    toggleMessages();
  });
  (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
    if (model$4.open) {
      event.stopPropagation();
      toggleMessages();
    }
  });
}

function addMarkAllReadListener() {
  var _document$querySelect3;

  (_document$querySelect3 = document.querySelector(".messages__read-all-btn")) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.addEventListener("click", function () {
    return markAllRead();
  });
}
/********/

/* init */

/********/


function init$5(urls) {
  initModel$4(urls);
  update$3();
  view$3();
  initEventListeners$1();
}

"use strict";

/*********/

/* model */

/*********/

var model$5;

function initModel$5(flagQuestionUrl, getFlagQuestionReasonsUrl, getNewQuestionUrl, toggleFavouriteUrl) {
  model$5 = {
    flagQuestionReasons: [],
    urls: {
      flagQuestion: flagQuestionUrl,
      getFlagQuestionReasons: getFlagQuestionReasonsUrl,
      getNewQuestion: getNewQuestionUrl,
      toggleFavourite: toggleFavouriteUrl
    }
  };
}

var transition = {
  duration: 600,
  direction: "right",
  easing: "easeInOutCubic"
};
/**********/

/* update */

/**********/

function update$4() {
  return _update$1.apply(this, arguments);
}

function _update$1() {
  _update$1 = _asyncToGenerator(function* () {
    yield getFlagQuestionReasons();
  });
  return _update$1.apply(this, arguments);
}

function toggleFlagQuestion(question) {
  var open = question.getAttribute("open");
  var id = question.getAttribute("data-id");
  var form = question.querySelector(".flag-question__form");
  var icon = question.querySelector(".flag-question__btn");

  if (id === null) {
    console.log("The flag question div needs a `data-id` attribute representing the " + "question pk.");
  }

  if (open === null) {
    question.setAttribute("open", "");
    form.removeAttribute("hidden");
    icon.textContent = "flag";
  } else {
    question.removeAttribute("open");
    form.setAttribute("hidden", "");
    icon.textContent = "outlined_flag";
  }
}

function getFlagQuestionReasons() {
  return _getFlagQuestionReasons.apply(this, arguments);
}

function _getFlagQuestionReasons() {
  _getFlagQuestionReasons = _asyncToGenerator(function* () {
    var req = buildReq({}, "get");
    var resp = yield fetch(model$5.urls.getFlagQuestionReasons, req);

    if (!resp.ok) {
      console.log(resp);
    }

    var data = yield resp.json();
    model$5.flagQuestionReasons = data.reasons;
    flagQuestionView();
  });
  return _getFlagQuestionReasons.apply(this, arguments);
}

function flagQuestion(_x) {
  return _flagQuestion.apply(this, arguments);
}

function _flagQuestion() {
  _flagQuestion = _asyncToGenerator(function* (question) {
    var id = question.getAttribute("data-id");
    var select = question.querySelector(".flag-question__form__select");
    var reason = select.options[select.selectedIndex].value;
    var data = {
      id: id,
      reason: reason
    };
    var req = buildReq(data, "post");
    var resp = yield fetch(model$5.urls.flagQuestion, req);

    if (!resp.ok) {
      console.log(resp);
    }

    toggleFlagQuestion(question);
    yield getNewQuestion(question.parentNode.parentNode.parentNode);
  });
  return _flagQuestion.apply(this, arguments);
}

function getNewQuestion(_x2) {
  return _getNewQuestion.apply(this, arguments);
}
/********/

/* view */

/********/


function _getNewQuestion() {
  _getNewQuestion = _asyncToGenerator(function* (question) {
    var posting = $.get(model$5.urls.getNewQuestion);
    posting.done(function (data) {
      $(question).toggle("fade", function () {
        $(question).remove();
        $("#questions").append(data);
        $("#questions .mdc-card").hide().toggle("slide", transition);
        initNewCard(model$5.urls.toggleFavourite, model$5.urls.getNewQuestion);
        window.location.href = "#questions";
      });
    });
    posting.fail(function () {
      x.innerHTML = "error"; // Add snack bar?

      window.setTimeout(function () {
        x.innerHTML = "autorenew";
      }, 5000);
    });
  });
  return _getNewQuestion.apply(this, arguments);
}

function view$4() {
  flagQuestionView();
}

function flagQuestionView() {
  _toConsumableArray(document.getElementsByClassName("flag-question")).forEach(function (question) {
    var select = question.querySelector(".flag-question__form select");
    clear(select);
    model$5.flagQuestionReasons.forEach(function (reason) {
      var option = document.createElement("option");
      option.classList.add("flag-question__form__option");
      option.value = reason;
      option.textContent = reason;
      select.appendChild(option);
    });
  });
}
/*************/

/* listeners */

/*************/


function addFlagQuestionListeners() {
  _toConsumableArray(document.getElementsByClassName("flag-question")).forEach(function (question) {
    question.querySelector(".flag-question__close").addEventListener("click", function (event) {
      event.stopPropagation();
      toggleFlagQuestion(question);
    });
    question.querySelector(".flag-question__btn").addEventListener("click", function (event) {
      event.stopPropagation();
      toggleFlagQuestion(question);
    });
    question.querySelector(".flag-question__form").addEventListener("click", function (event) {
      event.stopPropagation();
    });
    question.querySelector(".flag-question__form").addEventListener("submit", function (event) {
      event.preventDefault();
      flagQuestion(question);
    });
    document.body.addEventListener("click", function () {
      if (question.hasAttribute("open")) {
        toggleFlagQuestion(question);
      }
    });
  });
}
/********/

/* init */

/********/


function initNewCard(favUrl, refreshUrl) {
  $("#questions .mdc-card").each(function (i, el) {
    if (el.getAttribute("initialized") !== "true") {
      el.setAttribute("initialized", "true");
      $(el).find(".mdc-icon-toggle.favourite-btn").each(function (i, heart) {
        bundle.iconToggle.MDCIconToggle.attachTo(heart);
        heart.addEventListener("click", function () {
          var posting = $.post(favUrl, {
            pk: heart.getAttribute("data-id")
          });
          posting.done(function (data) {
            console.log(data);
          });
        });
      });
      $(el).find(".remove-btn").each(function (i, x) {
        x.addEventListener("click", function () {
          var posting = $.get(refreshUrl);
          posting.done(function (data) {
            $(el).toggle("fade", function () {
              $(el).remove();
              $("#questions").append(data);
              $("#questions .mdc-card").hide().toggle("slide", transition);
              initNewCard(favUrl, refreshUrl);
              window.location.href = "#questions";
            });
          });
          posting.fail(function () {
            x.innerHTML = "error"; // Add snack bar?

            window.setTimeout(function () {
              x.innerHTML = "autorenew";
            }, 5000);
          });
        });
      });
    }
  });
  addFlagQuestionListeners();
  view$4();
}

function init$6(_x3, _x4, _x5, _x6) {
  return _init$2.apply(this, arguments);
}

function _init$2() {
  _init$2 = _asyncToGenerator(function* (favUrl, refreshUrl, getFlagQuestionReasonsUrl, flagQuestionUrl) {
    initModel$5(flagQuestionUrl, getFlagQuestionReasonsUrl, refreshUrl, favUrl);
    initNewCard(favUrl, refreshUrl);
    update$4();
  });
  return _init$2.apply(this, arguments);
}

"use strict";

function init$7(data) {
  function draw() {
    $(".progress-chart").each(function (i, el) {
      var dataset = data[el.getAttribute("group")][el.getAttribute("assignment")];
      bundle.plotTimeSeries(el, dataset);
    });
  }

  draw();
  window.addEventListener("resize", draw);
}

"use strict";

var transition$1 = {
  duration: 600,
  direction: "right",
  easing: "easeInOutCubic"
};
function init$8(url) {
  // Rating system
  $("#rationales .mdc-card").each(function (i, el) {
    var id = el.getAttribute("data-id");
    var score; // Score

    $(el).find(".star").each(function (i, star) {
      // Handle hover
      star.addEventListener("mouseover", function () {
        score = star.getAttribute("data-rank");
        $(".star").each(function (i, _star) {
          if (_star.getAttribute("data-rank") <= score) {
            _star.innerHTML = "star";
          } else {
            _star.innerHTML = "star_border";
          }
        });
      });
      star.addEventListener("mouseout", function () {
        $(".star").each(function (i, _star) {
          _star.innerHTML = "star_border";
        });
      }); // Submit score

      $(star).one("click", function () {
        var posting = $.post(url, {
          id: id,
          score: score
        });
        posting.done(function (data) {
          processResponse(data);
        });
      });
    }); // Flag inappropriate

    $(el).find(".flag").each(function (i, flag) {
      flag.addEventListener("mouseover", function () {
        $(".flag").each(function (i, _flag) {
          _flag.innerHTML = "flag";
        });
      });
      flag.addEventListener("mouseout", function () {
        $(".flag").each(function (i, _flag) {
          _flag.innerHTML = "outlined_flag";
        });
      });
      $(flag).one("click", function () {
        var posting = $.post(url, {
          id: id,
          score: 0
        });
        posting.done(function (data) {
          processResponse(data);
        });
      });
    });

    function processResponse(data) {
      $(el).toggle("fade", function () {
        $(el).remove();
        $("#rationales").append(data);
        $("#rationales .mdc-card").hide().toggle("slide", transition$1);
        init$8(url); // Refresh reputation score

        document.getElementsByTagName("teacher-reputation-header")[0].setAttribute("stale", "");
      });
    }
  });
}

"use strict";

exports.initDashboard = init$$1;
exports.initCustomReport = init$2;
exports.initGradebooks = init$3;
exports.initMessages = init$5;
exports.initNotifications = init$4;
exports.initQuestionCards = init$6;
exports.initStudentActivityCards = init$7;
exports.initRationalesToScoreCards = init$8;

}((this.teacher = this.teacher || {})));
//# sourceMappingURL=teacher.min.js.map
