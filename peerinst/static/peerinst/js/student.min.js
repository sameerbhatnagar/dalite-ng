(function (exports) {
'use strict';

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

/*********/

/* model */

/*********/

var model;

function initModel(data) {
  model = {
    expiryBlinkingDelay: data.expiry_blinking_delay,
    joiningGroup: false,
    newStudent: data.new_student,
    student: {
      username: data.student.username,
      email: data.student.email,
      memberSince: new Date(data.student.member_since),
      tos: {
        sharing: data.student.tos.sharing,
        signedOn: new Date(data.student.tos.signed_on)
      }
    },
    groups: data.groups.map(function (group) {
      return {
        name: group.name,
        title: group.title,
        notifications: group.notifications,
        memberOf: group.member_of,
        assignments: group.assignments.map(function (assignment) {
          return {
            title: assignment.title,
            dueDate: new Date(assignment.due_date),
            link: assignment.link,
            results: {
              grade: assignment.results.grade,
              n: assignment.results.n
            },
            done: assignment.done,
            almostExpired: assignment.almost_expired
          };
        }),
        studentId: group.student_id,
        studentIdNeeded: group.student_id_needed
      };
    }),
    urls: {
      tosModify: data.urls.tos_modify,
      joinGroup: data.urls.join_group,
      leaveGroup: data.urls.leave_group,
      saveStudentId: data.urls.save_student_id,
      studentToggleGroupnotifications: data.urls.student_toggle_group_notifications
    },
    translations: {
      assignmentAboutToExpire: data.translations.assignment_about_to_expire,
      assignmentExpired: data.translations.assignment_expired,
      cancel: data.translations.cancel,
      completed: data.translations.completed,
      day: data.translations.day,
      days: data.translations.days,
      dueOn: data.translations.due_on,
      editStudentId: data.translations.edit_student_id,
      expired: data.translations.expired,
      goToAssignment: data.translations.go_to_assignment,
      grade: data.translations.grade,
      hour: data.translations.hour,
      hours: data.translations.hours,
      leave: data.translations.leave,
      leaveGroupQuestion: data.translations.leave_group_question,
      leaveGroupText: data.translations.leave_group_text,
      leaveGroupTitle: data.translations.leave_group_title,
      minute: data.translations.minute,
      minutes: data.translations.minutes,
      noAssignments: data.translations.no_assignments,
      notificationsBell: data.translations.notifications_bell,
      notSharing: data.translations.not_sharing,
      sharing: data.translations.sharing,
      studentId: data.translations.student_id,
      studentIdNeeded: data.translations.student_id_needed
    }
  };
}
/**********/

/* update */

/**********/


function handleStudentIdKeyDown(key, group, node) {
  if (key === "Enter") {
    saveStudentId(group, node);
  } else if (key === "Escape") {
    stopEditStudentId(group, node);
  }
}

function saveStudentId(group, node) {
  var url = model.urls.saveStudentId;
  var input = node.querySelector("input");
  var data = {
    student_id: input.value,
    group_name: group.name
  };
  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    group.studentId = data.student_id;
    stopEditStudentId(group, node);
  }).catch(function (err) {
    stopEditStudentId(group, node);
    console.log(err);
  });
}

function toggleGroupNotifications(group, bell) {
  var url = model.urls.studentToggleGroupnotifications;
  var data = {
    group_name: group.name
  };
  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    group.notifications = data.notifications;

    if (group.notifications) {
      bell.textContent = "notifications";
      bell.classList.remove("student-group--notifications__disabled");
    } else {
      bell.textContent = "notifications_off";
      bell.classList.add("student-group--notifications__disabled");
    }
  }).catch(function (err) {
    console.log(err);
  });
}

function leaveGroup(group, groupNode) {
  var url = model.urls.leaveGroup;
  var data = {
    group_name: group.name
  };
  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    if (resp.ok) {
      model.groups.filter(function (g) {
        return g.name === group.name;
      })[0].memberOf = false;
      groupsView();
    } else {
      console.log(resp);
    }
  }).catch(function (err) {
    return console.log(err);
  });
}

function copyStudentIdToClipboard(group, node) {
  navigator.clipboard.writeText(group.studentId).then(function () {
    return showCopyBubble(node);
  });
}

function goToAssignment(group, assignment) {
  if (!group.studentIdNeeded || group.studentId !== "") {
    window.location = assignment.link;
  } else {
    toggleStudentIdNeededView(group);
  }
}
function modifyTos() {
  var url = model.urls.tosModify + "?next=" + window.location.href;
  window.location.href = url;
}
function toggleJoinGroup() {
  model.joiningGroup = !model.joiningGroup;
  joinGroupView();
}
function handleJoinGroupLinkInput(event) {
  if (event.key === "Enter") {
    joinGroup();
  } else {
    if (event.currentTarget.value) {
      joinGroupErrorView("", false);
    }

    verifyJoinGroupDisabledStatus();
  }
}
function joinGroup() {
  var url = model.urls.joinGroup;
  var input = document.querySelector("#student-add-group--box input");
  var select = document.querySelector("#student-add-group--box select");
  var data;

  if (input.value) {
    data = {
      username: model.student.username,
      group_link: input.value
    };
  } else if (model.groups.some(function (group) {
    return !group.memberOf;
  })) {
    data = {
      username: model.student.username,
      group_name: select.value
    };
  } else {
    joinGroupErrorView("A URL is needed.", true);
    return;
  }

  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (group) {
    input.value = "";

    if (model.groups.some(function (g) {
      return g.name === group.name;
    })) {
      model.groups.filter(function (g) {
        return g.name === group.name;
      })[0].memberOf = group.member_of;
    } else {
      model.groups.push({
        name: group.name,
        title: group.title,
        notifications: group.notifications,
        memberOf: group.member_of,
        assignments: group.assignments.map(function (assignment) {
          return {
            title: assignment.title,
            dueDate: new Date(assignment.due_date),
            link: assignment.link,
            results: {
              n: assignment.results.n,
              grade: assignment.results.grade
            },
            done: assignment.done,
            almostExpired: assignment.almost_expired
          };
        }),
        studentId: group.student_id,
        studentIdNeeded: group.student_id_needed
      });
    }

    toggleJoinGroup();
    groupsView();
  }).catch(function (err) {
    joinGroupErrorView("There is no group with that link.", true);
  });
}
/********/

/* view */

/********/

function view(groupStudentId) {
  identityView();
  groupsView(groupStudentId);
  joinGroupView();
}

function identityView() {
  var emailSpan = document.getElementById("student-email");
  emailSpan.textContent = model.student.email;
  var memberSinceSpan = document.getElementById("student-member-since");
  memberSinceSpan.textContent = model.student.memberSince.toLocaleString("en-ca", {
    month: "short",
    day: "numeric",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });
  var tosSharingIcon = document.getElementById("student-tos-sharing--icon");
  var tosSharingSpan = document.getElementById("student-tos-sharing--sharing");

  if (model.student.tos.sharing) {
    tosSharingIcon.textContent = "check";
    tosSharingSpan.textContent = model.translations.sharing;
  } else {
    tosSharingIcon.textContent = "clear";
    tosSharingSpan.textContent = model.translations.notSharing;
  }

  var tosSignedOnSpan = document.getElementById("student-tos-signed-on");
  tosSignedOnSpan.textContent = model.student.tos.signedOn.toLocaleString("en-ca", {
    month: "short",
    day: "numeric",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });
}

function joinGroupView() {
  var box = document.getElementById("student-add-group--box");
  var input = document.querySelector("#student-add-group--box input");

  if (model.joiningGroup) {
    joinGroupsSelectView();
    box.style.display = "flex";
  } else {
    box.style.display = "none";
    input.value = "";
  }

  joinGroupErrorView("", false);
}

function joinGroupErrorView(msg, show) {
  var error = document.getElementById("student-add-group__error");
  var input = document.querySelector("#student-add-group--box input");
  error.textContent = msg;

  if (show) {
    error.removeAttribute("hidden");
    input.classList.add("input--error");
  } else {
    error.setAttribute("hidden", "");
    input.classList.remove("input--error");
  }
}

function joinGroupsSelectView() {
  var groupsSelect = document.getElementById("student-old-groups");
  clear(groupsSelect);
  var oldGroups = model.groups.filter(function (group) {
    return !group.memberOf;
  });

  if (oldGroups.length) {
    oldGroups.map(function (group) {
      return groupsSelect.appendChild(joinGroupSelectView(group));
    });
    groupsSelect.style.display = "inline-block";
    verifyJoinGroupDisabledStatus();
  } else {
    groupsSelect.style.display = "none";
  }
}

function joinGroupSelectView(group) {
  var option = document.createElement("option");
  option.value = group.name;
  option.textContent = group.title;
  return option;
}

function verifyJoinGroupDisabledStatus() {
  var input = document.querySelector("#student-add-group--box input");
  var select = document.querySelector("#student-add-group--box select");

  if (input.value) {
    select.disabled = true;
  } else {
    select.disabled = false;
  }
}

function groupsView() {
  var groupStudentId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var groups = document.getElementById("student-groups");
  clear(groups);
  model.groups.filter(function (group) {
    return group.memberOf;
  }).map(function (group) {
    return groups.appendChild(groupView(group));
  });

  if (groupStudentId) {
    for (var i = 0; i < model.groups.length; i++) {
      if (model.groups[i].name == groupStudentId) {
        toggleStudentIdNeededView(model.groups[i]);
        break;
      }
    }
  }
}

function groupView(group) {
  var div = document.createElement("div");
  div.classList.add("student-group");
  div.setAttribute("data-group", group.name);
  div.appendChild(groupTitleView(group));
  div.appendChild(groupAssignmentsView(group));
  return div;
}

function groupTitleView(group) {
  var div = document.createElement("div");
  div.classList.add("student-group--title");

  if (group.studentIdNeeded) {
    div.appendChild(groupTitleIdView(group));
  }

  var title = document.createElement("h3");
  title.textContent = group.title;
  div.appendChild(title);
  var icons = document.createElement("div");
  icons.classList.add("student-group--icons");
  div.appendChild(icons);
  var notifications = document.createElement("div");
  notifications.classList.add("student-group--notifications");
  icons.appendChild(notifications);
  var bell = document.createElement("i");
  bell.classList.add("material-icons", "md-28");
  bell.title = model.translations.notificationsBell;
  bell.addEventListener("click", function () {
    return toggleGroupNotifications(group, bell);
  });

  if (group.notifications) {
    bell.textContent = "notifications";
  } else {
    bell.textContent = "notifications_off";
    bell.classList.add("student-group--notifications__disabled");
  }

  notifications.appendChild(bell);
  icons.appendChild(leaveGroupView(group, div));
  return div;
}

function groupTitleIdView(group) {
  var div = document.createElement("div");
  div.classList.add("student-group--id");
  var copyIcon = document.createElement("i");
  copyIcon.classList.add("material-icons", "md-28", "student-group--id__copy");
  copyIcon.style.display = "flex";
  copyIcon.textContent = "file_copy";
  copyIcon.addEventListener("click", function () {
    return copyStudentIdToClipboard(group, div);
  });
  div.appendChild(copyIcon);
  var studentId = document.createElement("span");
  studentId.classList.add("student-group--id__id");
  studentId.style.display = "inline-block";
  studentId.textContent = group.studentId;
  studentId.title = model.translations.studentId;
  studentId.addEventListener("click", function () {
    return editStudentId(group, div);
  });
  div.appendChild(studentId);
  var input = document.createElement("input");
  input.classList.add("student-group--id__input");
  input.value = group.schoolId;
  input.style.display = "none";
  input.addEventListener("keydown", function (event) {
    return handleStudentIdKeyDown(event.key, group, div);
  });
  div.appendChild(input);
  var editIcon = document.createElement("i");
  editIcon.classList.add("material-icons", "md-28", "student-group--id__edit");
  editIcon.style.display = "flex";
  editIcon.textContent = "edit";
  editIcon.title = model.translations.editStudentId;
  editIcon.addEventListener("click", function () {
    return editStudentId(group, div);
  });
  div.appendChild(editIcon);
  var confirmIcon = document.createElement("i");
  confirmIcon.classList.add("material-icons", "md-28", "student-group--id__confirm");
  confirmIcon.style.display = "none";
  confirmIcon.textContent = "check";
  confirmIcon.addEventListener("click", function () {
    return saveStudentId(group, div);
  });
  div.appendChild(confirmIcon);
  var cancelIcon = document.createElement("i");
  cancelIcon.classList.add("material-icons", "md-28", "student-group--id__cancel");
  cancelIcon.style.display = "none";
  cancelIcon.textContent = "close";
  cancelIcon.addEventListener("click", function () {
    return stopEditStudentId(group, div);
  });
  div.appendChild(cancelIcon);
  return div;
}

function groupAssignmentsView(group) {
  var div = document.createElement("div");
  div.classList.add("student-group--assignments");

  if (group.assignments.length) {
    var ul = document.createElement("ul");
    group.assignments.map(function (assignment) {
      return ul.appendChild(groupAssignmentView(assignment, group));
    });
    div.appendChild(ul);
  } else {
    var span = document.createElement("span");
    span.classList.add("student-group--no-assignments");
    span.textContent = model.translations.noAssignments;
    div.appendChild(span);
  }

  return div;
}

function groupAssignmentView(assignment, group) {
  var a = document.createElement("a");
  a.href = assignment.link;
  var li = document.createElement("li");
  li.classList.add("student-group--assignment");

  if (assignment.done) {
    li.classList.add("student-group--assignment-complete");
  }

  li.addEventListener("click", function (event) {
    return goToAssignment(group, assignment);
  });
  var almostExpiredMin = new Date(assignment.dueDate);
  almostExpiredMin.setDate(almostExpiredMin.getDate() - model.expiryBlinkingDelay);
  var iconSpan = document.createElement("span");
  iconSpan.classList.add("student-group--assignment-icon");
  li.appendChild(iconSpan);
  var icon = document.createElement("i");
  icon.classList.add("material-icons", "md-28");

  if (assignment.done) {
    iconSpan.title = model.translations.goToAssignment;
    icon.textContent = "assignment_turned_in";
  } else if (assignment.dueDate <= new Date(Date.now())) {
    iconSpan.title = model.translations.assignmentExpired;
    icon.textContent = "assignment_late";
  } else if (almostExpiredMin <= new Date(Date.now())) {
    iconSpan.title = model.translations.assignmentAboutToExpire;
    icon.textContent = "assignment_late";
  } else {
    iconSpan.title = model.translations.goToAssignment;
    icon.textContent = "assignment";
  }

  iconSpan.appendChild(icon);
  var gradeSpan = document.createElement("span");
  gradeSpan.classList.add("student-group--assignment-questions");
  gradeSpan.title = model.translations.grade;
  li.appendChild(gradeSpan);
  var grade = document.createElement("span");
  grade.textContent = assignment.results.grade;
  gradeSpan.appendChild(grade);
  var slash = document.createElement("span");
  slash.textContent = "/";
  gradeSpan.appendChild(slash);
  var n = document.createElement("span");
  n.textContent = assignment.results.n;
  gradeSpan.appendChild(n);
  var title = document.createElement("span");
  title.classList.add("student-group--assignment-title");
  title.title = model.translations.goToAssignment;
  title.textContent = assignment.title;
  li.appendChild(title);
  var date = document.createElement("span");
  date.classList.add("student-group--assignment-date");

  if (assignment.done) {
    date.removeAttribute("title");
    date.textContent = model.translations.completed;
  } else if (assignment.dueDate <= new Date(Date.now())) {
    date.title = model.translations.assignmentExpired;
    date.textContent = model.translations.expired;
  } else {
    date.title = model.translations.dueOn + " " + assignment.dueDate.toLocaleString("en-ca", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
    var dateIcon = document.createElement("i");
    dateIcon.classList.add("material-icons", "md-18");
    dateIcon.textContent = "access_time";
    date.appendChild(dateIcon);
    var remainingTimeSpan = document.createElement("span");
    remainingTimeSpan.textContent = timeuntil(assignment.dueDate, new Date(Date.now()));
    date.appendChild(remainingTimeSpan);

    if (almostExpiredMin <= new Date(Date.now())) {
      dateIcon.classList.add("blinking");
    }
  }

  li.appendChild(date);
  return li;
}

function leaveGroupView(group, groupNode) {
  var div = document.createElement("div");
  div.classList.add("student-group--remove");
  div.title = model.translations.leaveGroupTitle;
  var icon = document.createElement("i");
  icon.classList.add("material-icons", "md-28");
  icon.addEventListener("click", function () {
    return toggleLeaveGroup(groupNode);
  });
  icon.textContent = "remove_circle_outline";
  div.appendChild(icon);
  var box = document.createElement("div");
  box.classList.add("student-group--remove-confirmation-box");
  box.style.display = "none";
  box.addEventListener("click", function (event) {
    event.stopPropagation;
    toggleLeaveGroup(groupNode);
  });
  div.appendChild(box);
  var boxDiv = document.createElement("div");
  boxDiv.addEventListener("click", function (event) {
    return event.stopPropagation();
  });
  box.appendChild(boxDiv);
  var title = document.createElement("h3");
  title.textContent = model.translations.leaveGroupTitle + " " + group.title;
  boxDiv.appendChild(title);
  var text = document.createElement("p");
  text.textContent = model.translations.leaveGroupText;
  boxDiv.appendChild(text);
  var question = document.createElement("p");
  question.textContent = model.translations.leaveGroupQuestion;
  boxDiv.appendChild(question);
  var leave = document.createElement("button");
  leave.classList.add("mdc-button", "mdc-button--unelevated");
  leave.addEventListener("click", function () {
    return leaveGroup(group, groupNode);
  });
  leave.textContent = model.translations.leave;
  boxDiv.appendChild(leave);
  var cancel = document.createElement("button");
  cancel.classList.add("mdc-button");
  cancel.addEventListener("click", function () {
    return toggleLeaveGroup(groupNode);
  });
  cancel.textContent = model.translations.cancel;
  boxDiv.appendChild(cancel);
  return div;
}

function editStudentId(group, node) {
  var span = node.querySelector(".student-group--id__id");
  var input = node.querySelector(".student-group--id__input");
  var copyBtn = node.querySelector(".student-group--id__copy");
  var editBtn = node.querySelector(".student-group--id__edit");
  var confirmBtn = node.querySelector(".student-group--id__confirm");
  var cancelBtn = node.querySelector(".student-group--id__cancel");
  input.value = group.studentId;
  span.style.display = "none";
  copyBtn.style.display = "none";
  editBtn.style.display = "none";
  input.style.display = "inline-block";
  confirmBtn.style.display = "flex";
  cancelBtn.style.display = "flex";
  input.focus();
  toggleStudentIdNeededView(group);
}

function stopEditStudentId(group, node) {
  var span = node.querySelector("span");
  var input = node.querySelector("input");
  var copyBtn = node.querySelector(".student-group--id__copy");
  var editBtn = node.querySelector(".student-group--id__edit");
  var confirmBtn = node.querySelector(".student-group--id__confirm");
  var cancelBtn = node.querySelector(".student-group--id__cancel");
  span.textContent = group.studentId;
  span.style.display = "inline-block";
  copyBtn.style.display = "flex";
  editBtn.style.display = "flex";
  input.style.display = "none";
  confirmBtn.style.display = "none";
  cancelBtn.style.display = "none";
}

function toggleStudentIdNeededView(group) {
  var _node$querySelector;

  var node = document.querySelector(".student-group[data-group='".concat(group.name, "'] .student-group--id"));

  if (((_node$querySelector = node.querySelector(".student-group--id__input")) === null || _node$querySelector === void 0 ? void 0 : _node$querySelector.style.display) === "none") {
    var alert = document.createElement("div");
    alert.classList.add("student-group--id__alert");
    alert.textContent = model.translations.studentIdNeeded;
    node.appendChild(alert);
    alert.scrollIntoView(true);
  } else {
    var _alert = node.querySelector(".student-group--id__alert");

    _alert === null || _alert === void 0 ? void 0 : _alert.parentNode.removeChild(_alert);
  }
}

function toggleLeaveGroup(node) {
  var box = node.querySelector(".student-group--remove-confirmation-box");

  if (box.style.display == "none") {
    box.style.display = "flex";
  } else {
    box.style.display = "none";
  }
}

function showCopyBubble(node) {
  var bubble = document.createElement("div");
  bubble.classList.add("bubble");
  bubble.textContent = "Copied to clipboard!";
  node.appendChild(bubble);
  setTimeout(function () {
    return node.removeChild(bubble);
  }, 600);
}
/*************/

/* listeners */

/*************/


function initListeners() {
  addLinkListeners();
  addJoinGroupListeners();
}

function addLinkListeners() {
  document.getElementById("edit-user-btn").addEventListener("click", function () {
    edit_user();
  });
  document.getElementById("modify-tos-btn").addEventListener("click", function () {
    modifyTos();
  });
}

function addJoinGroupListeners() {
  document.querySelector("#student-add-group .admin-link").addEventListener("click", function () {
    toggleJoinGroup();
  });
  document.getElementById("student-add-group--box").addEventListener("click", function () {
    event.stopPropagation;
  });
  document.querySelector("#student-add-group--box > div").addEventListener("click", function () {
    event.stopPropagation;
  });
  document.querySelector("#student-add-group--box input[name='new-group']").addEventListener("keyup", function (event) {
    handleJoinGroupLinkInput(event);
  });
  document.getElementById("join-group-btn").addEventListener("click", function () {
    joinGroup();
  });
  document.getElementById("cancel-join-group-btn").addEventListener("click", function () {
    toggleJoinGroup();
  });
}
/*********/

/* utils */

/*********/


function timeuntil(date1, date2) {
  var diff = date1 - date2;
  var diffDays = Math.floor(diff / 1000 / 60 / 60 / 24);
  diff = diff - diffDays * 24 * 60 * 60 * 1000;
  var diffHours = Math.floor(diff / 1000 / 60 / 60);
  diff = diff - diffHours * 60 * 60 * 1000;
  var diffMinutes = Math.floor(diff / 1000 / 60);
  var diff_ = "";

  if (diffDays > 1) {
    diff_ = diff_ + parseInt(diffDays) + " " + model.translations.days + ", ";
  } else if (diffDays === 1) {
    diff_ = diff_ + parseInt(diffDays) + " " + model.translations.day + ", ";
  }

  if (diffHours === 1) {
    diff_ = diff_ + parseInt(diffHours) + " " + model.translations.hour + ", ";
  } else if (diffHours > 1 || diffDays) {
    diff_ = diff_ + parseInt(diffHours) + " " + model.translations.hours + ", ";
  }

  if (diffMinutes === 1) {
    diff_ = diff_ + parseInt(diffMinutes) + " " + model.translations.minute;
  } else {
    diff_ = diff_ + parseInt(diffMinutes) + " " + model.translations.minutes;
  }

  return diff_;
}
/********/

/* init */

/********/


function initStudentPage(data) {
  var groupStudentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  initModel(data);
  view(groupStudentId);
  initListeners();
}

/*********/

/* model */

/*********/

var model$1;

function initModel$1(data) {
  model$1 = {
    notificationsOpen: false,
    notifications: data.notifications,
    urls: {
      studentPage: data.urls.student_page,
      removeNotification: data.urls.remove_notification,
      removeNotifications: data.urls.remove_notifications
    }
  };
}
/**********/

/* update */

/**********/


function toggleNotifications() {
  model$1.notificationsOpen = !model$1.notificationsOpen;
  notificationsView();
}

function markNotificationRead(notification) {
  var url = model$1.urls.removeNotification;
  var data = {
    notification_pk: notification.pk
  };
  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    return resp.text();
  }).then(function (groupName) {
    if (groupName) {
      window.location = model$1.urls.studentPage + "?group-student-id-needed=" + groupName;
    } else if (notification.link) {
      window.location = notification.link;
    } else {
      model$1.notifications.splice(model$1.notifications.indexOf(notification), 1);
      notificationsView();
    }
  }).catch(function (err) {
    console.log(err);
  });
}

function markAllNotificationsRead() {
  var url = model$1.urls.removeNotifications;
  var req = buildReq({}, "post");
  fetch(url, req).then(function (resp) {
    if (resp.ok) {
      model$1.notifications = [];
      notificationsView();
    }
  }).catch(function (err) {
    console.log(err);
  });
}
/********/

/* view */

/********/


function view$1() {
  notificationsView();
}

function notificationsView() {
  var notifications = document.querySelector(".notifications");
  var badge = notifications.querySelector(".notifications__icon__badge");
  var notificationsList = notifications.querySelector(".notifications__notifications");

  if (model$1.notifications.length) {
    badge.textContent = model$1.notifications.length;
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }

  clear(notificationsList);

  if (model$1.notifications.length) {
    model$1.notifications.map(function (notification) {
      notificationsList.appendChild(notificationView(notification));
    });
  } else {
    notificationsList.appendChild(noNotificationView());
  }

  if (model$1.notificationsOpen) {
    notifications.classList.add("notifications--open");
  } else {
    notifications.classList.remove("notifications--open");
  }
}

function notificationView(notification) {
  var div = document.createElement("div");
  div.classList.add("notification");
  div.textContent = notification.text;
  div.addEventListener("click", function () {
    return markNotificationRead(notification);
  });
  return div;
}

function noNotificationView() {
  var div = document.createElement("div");
  div.textContent = "No new notifications";
  return div;
}
/*************/

/* listeners */

/*************/


function initListeners$1() {
  addNotificationsOpenListener();
  addAllNotificationsReadListener();
}

function addNotificationsOpenListener() {
  document.querySelector(".notifications").addEventListener("click", function (event) {
    event.stopPropagation();
  });
  document.querySelector(".notifications__icon").addEventListener("click", function (event) {
    toggleNotifications();
  });
  document.body.addEventListener("click", function (event) {
    if (model$1.notificationsOpen) {
      toggleNotifications();
    }
  });
}

function addAllNotificationsReadListener() {
  document.querySelector(".notifications__read-all-btn").addEventListener("click", markAllNotificationsRead);
}
/********/

/* init */

/********/


function init(url) {
  var req = buildReq(null, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    initModel$1(data);
    initListeners$1();
    view$1();
  }).catch(function (err) {
    return console.log(err);
  });
}

exports.joinGroup = joinGroup;
exports.initStudentPage = initStudentPage;
exports.modifyTos = modifyTos;
exports.toggleJoinGroup = toggleJoinGroup;
exports.handleJoinGroupLinkInput = handleJoinGroupLinkInput;
exports.initStudentHeader = init;

}((this.student = this.student || {})));
//# sourceMappingURL=student.min.js.map
