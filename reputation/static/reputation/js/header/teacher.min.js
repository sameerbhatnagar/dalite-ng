(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

var ReputationHeader = /*#__PURE__*/function (_HTMLElement) {
  _inherits(ReputationHeader, _HTMLElement);

  _createClass(ReputationHeader, [{
    key: "reputationUrl",
    get: function get() {
      var url = this.getAttribute("reputation-url");

      if (!url) {
        throw new Error("The reputation-header needs a `reputation-url` attribute");
      }

      return url;
    }
  }, {
    key: "reputationStyleUrl",
    get: function get() {
      var style = this.getAttribute("reputation-style-url");

      if (!style) {
        throw new Error("The reputation-header needs a `reputation-style-url` attribute");
      }

      return style;
    }
  }, {
    key: "reputationId",
    get: function get() {
      var id = this.getAttribute("reputation-id");

      if (!id) {
        throw new Error("The reputation-header needs a `reputation-id` attribute");
      }

      return id;
    }
  }, {
    key: "nonce_",
    get: function get() {
      var nonce = this.getAttribute("nonce") || this.nonce;

      if (!nonce) {
        throw new Error("The teacher-reputation-header needs a `nonce` attribute");
      }

      return nonce;
    }
  }, {
    key: "hidden",
    get: function get() {
      return this.hasAttribute("hidden");
    },
    set: function set(val) {
      if (val) {
        this.setAttribute("hidden", "");
      } else {
        this.removeAttribute("hidden");
      }
    }
  }, {
    key: "open",
    get: function get() {
      return this.hasAttribute("open");
    },
    set: function set(val) {
      if (val) {
        this.setAttribute("open", "");
      } else {
        this.removeAttribute("open");
      }
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      // Any change to stale attribute should fire a refresh event
      return ["stale"];
    }
  }]);

  function ReputationHeader() {
    var _this;

    _classCallCheck(this, ReputationHeader);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReputationHeader).call(this));

    var shadow = _this.attachShadow({
      mode: "open"
    });

    _this.hidden = true;

    _this.init(shadow);

    return _this;
  }

  _createClass(ReputationHeader, [{
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(attrName, oldVal, newVal) {
      if (attrName === "stale") {
        this.update();
      }
    }
  }]);

  return ReputationHeader;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

"use strict";

var TeacherReputationHeader = /*#__PURE__*/function (_ReputationHeader) {
  _inherits(TeacherReputationHeader, _ReputationHeader);

  function TeacherReputationHeader() {
    _classCallCheck(this, TeacherReputationHeader);

    return _possibleConstructorReturn(this, _getPrototypeOf(TeacherReputationHeader).apply(this, arguments));
  }

  _createClass(TeacherReputationHeader, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator(function* (shadow) {
        /*********/

        /* model */

        /*********/
        var model = {
          id: parseInt(this.reputationId),
          element: this,
          reputation: null,
          reputationStyleUrl: this.reputationStyleUrl,
          reputationType: "teacher",
          reputationUrl: this.reputationUrl,
          reputations: [],
          shadow: shadow
        };
        /**********/

        /* update */

        /**********/

        this.update = update;

        function update() {
          return _update.apply(this, arguments);
        }

        function _update() {
          _update = _asyncToGenerator(function* () {
            yield getReputation();

            if (model.reputation !== null) {
              model.element.hidden = false;
            }
          });
          return _update.apply(this, arguments);
        }

        function getReputation() {
          return _getReputation.apply(this, arguments);
        }

        function _getReputation() {
          _getReputation = _asyncToGenerator(function* () {
            var postData = {
              reputation_type: model.reputationType,
              id: model.id
            };
            var req = buildReq(postData, "post");
            var resp = yield fetch(model.reputationUrl, req);
            var data = yield resp.json();
            model.reputation = data.reputation;
            model.reputations = data.reputations.map(function (reputation) {
              return {
                name: reputation.full_name,
                description: reputation.description,
                reputation: reputation.reputation
              };
            });
            iconView();
            listView();
          });
          return _getReputation.apply(this, arguments);
        }

        function toggleReputationList() {
          var header = model.element;
          document.querySelectorAll(".header--togglable > *").forEach(function (header_) {
            if (header_ != header && header_.hasAttribute("open")) {
              if (header_.shadowRoot) {
                header_.shadowRoot.querySelector(".header__icon").dispatchEvent(new Event("click"));
              } else {
                header_.querySelector(".header__icon").dispatchEvent(new Event("click"));
              }
            }
          });
          model.element.open = !model.element.open;
          iconView();
          listView();
        }
        /********/

        /* view */

        /********/


        function view() {
          shadow.appendChild(styleView());
          var container = document.createElement("div");
          container.id = "container";
          shadow.appendChild(container);
          container.appendChild(iconView());
          container.appendChild(listView());
        }

        function iconView() {
          // $FlowFixMe
          var icon = shadow.getElementById("icon");

          if (!icon) {
            var _document$body;

            icon = document.createElement("div");
            icon.id = "icon";
            icon.classList.add("header__icon");
            icon.title = "Reputation";
            icon.addEventListener("click", function (event) {
              event.stopPropagation();
              toggleReputationList();
            });
            var star = document.createElement("i");
            star.id = "icon__icon";
            star.textContent = "star";
            icon.appendChild(star);
            var span = document.createElement("span");
            span.id = "icon__reputation";

            if (model.reputation !== null && model.reputation !== undefined) {
              span.textContent = model.reputation.toString();
            }

            icon.appendChild(span); // $FlowFixMe

            (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
              if (model.element.open) {
                toggleReputationList();
              }
            });
          } else {
            if (model.reputation !== null && model.reputation !== undefined) {
              // $FlowFixMe
              shadow.getElementById("icon__reputation").textContent = model.reputation.toString();
            }
          }

          return icon;
        }

        function listView() {
          // $FlowFixMe
          var list = shadow.getElementById("list");

          if (!list) {
            list = document.createElement("div");
            list.id = "list";
            list.addEventListener("click", function (event) {
              event.stopPropagation();
            });
          }

          clear(list);
          headerView(list);
          model.reputations.forEach(function (reputation) {
            reputationView(list, reputation);
          });
          return list;
        }

        function headerView(list) {
          var name = document.createElement("div");
          name.classList.add("list__header");
          name.textContent = "Name";
          list.appendChild(name);
          var rep = document.createElement("div");
          rep.classList.add("list__header");
          rep.textContent = "Reputation";
          list.appendChild(rep);
        }

        function reputationView(list, reputation) {
          var name = document.createElement("div");
          name.classList.add("list__name");
          name.textContent = "".concat(reputation.name);
          name.title = reputation.description;
          list.appendChild(name);
          var rep = document.createElement("div");
          rep.classList.add("list__reputation");
          rep.textContent = (Math.round(reputation.reputation * 100) / 100).toString();
          list.appendChild(rep);
        }

        function styleView() {
          var style = document.createElement("link");
          style.setAttribute("href", model.reputationStyleUrl);
          style.setAttribute("rel", "stylesheet");
          style.setAttribute("nonce", model.element.nonce_);
          return style;
        }
        /********/

        /* init */

        /********/


        view();
        yield update();
      });

      function init(_x) {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }]);

  return TeacherReputationHeader;
}(ReputationHeader);

if (!customElements.get("teacher-reputation-header")) {
  customElements.define("teacher-reputation-header", TeacherReputationHeader);
}

}((this['header/teacher'] = this['header/teacher'] || {})));
//# sourceMappingURL=teacher.min.js.map
