(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";


function formatDatetime(datetime) {
  return datetime.toLocaleString("en-ca", {
    year: "numeric"
  }) + "-" + datetime.toLocaleString("en-ca", {
    month: "2-digit"
  }) + "-" + datetime.toLocaleString("en-ca", {
    day: "2-digit"
  }) + " " + datetime.toLocaleString("en-ca", {
    hour: "2-digit",
    hour12: false
  }) + ":" + datetime.toLocaleString("en-ca", {
    minute: "2-digit"
  });
}

/*********/

/* model */

/*********/

var model;

function initModel(urls) {
  model = {
    criteria: [],
    teachers: [],
    urls: {
      getCriteria: urls.getCriteria,
      getTeachers: urls.getTeachers,
      getTeacherInformation: urls.getTeacherInformation
    }
  };
}
/**********/

/* update */

/**********/


function update() {
  return _update.apply(this, arguments);
}

function _update() {
  _update = _asyncToGenerator(function* () {
    yield Promise.all([getCriteria(), getTeachers()]);
    getTeachersInformation();
  });
  return _update.apply(this, arguments);
}

function getCriteria() {
  return _getCriteria.apply(this, arguments);
}

function _getCriteria() {
  _getCriteria = _asyncToGenerator(function* () {
    var req = buildReq({}, "get");
    var resp = yield fetch(model.urls.getCriteria, req);
    var data = yield resp.json();
    model.criteria = data.criteria.map(function (criterion) {
      return {
        name: criterion.name,
        full_name: criterion.full_name,
        description: criterion.description
      };
    });
    tableView();
  });
  return _getCriteria.apply(this, arguments);
}

function getTeachers() {
  return _getTeachers.apply(this, arguments);
}

function _getTeachers() {
  _getTeachers = _asyncToGenerator(function* () {
    var req = buildReq({}, "get");
    var resp = yield fetch(model.urls.getTeachers, req);
    var data = yield resp.json();
    model.teachers = data.teachers.map(function (teacher) {
      return {
        id: teacher,
        username: null,
        lastLogin: null,
        reputations: []
      };
    });
  });
  return _getTeachers.apply(this, arguments);
}

function getTeachersInformation() {
  model.teachers.forEach(function (teacher) {
    getTeacherInformation(teacher);
  });
}

function getTeacherInformation(_x) {
  return _getTeacherInformation.apply(this, arguments);
}
/********/

/* view */

/********/


function _getTeacherInformation() {
  _getTeacherInformation = _asyncToGenerator(function* (teacher) {
    var req = buildReq({}, "get");
    var url = "".concat(model.urls.getTeacherInformation, "?id=").concat(teacher.id);
    var resp = yield fetch(url, req);
    var data = yield resp.json();
    teacher.username = data.username;
    teacher.lastLogin = data.last_login ? new Date(data.last_login) : null;
    teacher.reputations = data.reputations.map(function (reputation) {
      return {
        name: reputation.name,
        reputation: reputation.reputation
      };
    });
    tableRowView(teacher);
  });
  return _getTeacherInformation.apply(this, arguments);
}

function tableView() {
  tableHeadersView();
  var table = document.getElementById("teacher-list"); // prettier-ignore

  $(table).DataTable({
    // eslint-disable-line new-cap
    pageLength: 50,
    dom: '<"' + // eslint-disable-line quotes
    "fg-toolbar" + " ui-toolbar" + " ui-widget-header" + " ui-helper-clearfix" + " ui-corner-tl" + ' ui-corner-tr"Bf' + // eslint-disable-line quotes
    ">" + "t" + '<"' + // eslint-disable-line quotes
    "fg-toolbar" + " ui-toolbar" + " ui-widget-header" + " ui-helper-clearfix" + " ui-corner-tl" + ' ui-corner-tr"ip' + // eslint-disable-line quotes
    ">",
    buttons: ["csv", "colvis"]
  });
  table.removeAttribute("hidden");
}

function tableHeadersView() {
  var headers = document.querySelector("#teacher-list thead tr");
  model.criteria.forEach(function (criterion) {
    var header = document.createElement("th");
    header.title = criterion.description;
    header.textContent = criterion.full_name;
    headers.appendChild(header);
  });
}

function tableRowView(teacher) {
  $("#teacher-list").DataTable() // eslint-disable-line
  .row.add([teacher.username, teacher.lastLogin ? formatDatetime(teacher.lastLogin) : ""].concat(_toConsumableArray(model.criteria.map(function (criterion) {
    return teacher.reputations.find(function (reputation) {
      return reputation.name == criterion.name;
    }).reputation;
  })))).draw(false);
}
/********/

/* init */

/********/


function init(_x2) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (urls) {
    initModel(urls);
    yield update();
  });
  return _init.apply(this, arguments);
}

"use strict";

exports.initTable = init;

}((this.teachers = this.teachers || {})));
//# sourceMappingURL=teachers.min.js.map
